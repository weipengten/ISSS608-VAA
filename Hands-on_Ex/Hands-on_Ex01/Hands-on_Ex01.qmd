---
title: "Hands-on Exercise 1"
author: "Ten Wei Peng"
date: "April 13, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

## 1.2 Getting Started

### 1.2.1 Installing and loading the required libraries

::: callout-note
The code chunk on the right assumes that you already have [**pacman**](https://cran.r-project.org/web/packages/pacman/index.html) package installed. If not, please go ahead install pacman first.
:::

```{r}
pacman::p_load(tidyverse)
```

### 1.2.2 Importing data

-   The code chunk below imports *exam_data.csv* into R environment by using [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) function of [**readr**](https://readr.tidyverse.org/) package.

-   **readr** is one of the tidyverse package.

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

-   Year end examination grades of a cohort of primary 3 students from a local school.

-   There are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.

    -   The categorical attributes are: ID, CLASS, GENDER and RACE.
    -   The continuous attributes are: MATHS, ENGLISH and SCIENCE.

## 1.3 Introducing ggplot

-   ![](/img/image2a.jpg){width="60" height="74"} is an R package for **declaratively** creating **data-driven** graphics based on ***The Grammar of Graphics***

![](/img/image2b.png)

-   It is part of the tidyverse family specially designed for visual exploration and communication.

![](/img/image2c.png)

-   For more detail, visit [ggplot2 link](https://ggplot2.tidyverse.org/index.html).

### 1.3.1 R Graphics VS ggplot

::: panel-tabset
#### R Graphics

```{r}
#| fig-height: 6
hist(exam_data$MATHS)
```

#### ggplot2

```{r}
#| fig-height: 6
ggplot(data=exam_data, aes(x = MATHS)) +
  geom_histogram(bins=10, 
                 boundary = 100,
                 color="black", 
                 fill="grey") +
  ggtitle("Distribution of Maths scores")
```
:::

### Then, why ggplot2

::: callout-note
The transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.
:::

[Hadley Wickham](http://varianceexplained.org/r/teach_ggplot2_to_beginners/#comment-1745406157)

## 1.4 Grammar of Graphics

-   Wilkinson, L. (1999) **Grammar of Graphics**, Springer.

-   The grammar of graphics is an answer to a question:

::: {style="font-size: 1.25em; text-align: center"}
What is a statistical graphic?
:::

-   Grammar of graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.

-   There are two principles in Grammar of Graphics, they are:

    -   Graphics = distinct layers of grammatical elements
    -   Meaningful plots through aesthetic mapping

-   A good grammar will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978).

-   A grammar provides a strong foundation for understanding a diverse range of graphics.

-   A grammar may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics. :::

### 1.4.1. R A Layered Grammar of Graphics

![](/img/image4.jpg)

::: {style="font-size: 0.6em"}
Reference: Hadley Wickham (2010) ["A layered grammar of graphics."](https://vita.had.co.nz/papers/layered-grammar.html) *Journal of Computational and Graphical Statistics*, vol. 19, no. 1, pp. 3--28.
:::

::: {style="font-size: 0.75em"}
-   **Data**: The dataset being plotted.
-   **Aesthetics** take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.
-   **Geometrics**: The visual elements used for our data, such as point, bar or line.
-   **Facets** split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).
-   **Statistics**, statiscal transformations that summarise data (e.g. mean, confidence intervals).
-   **Coordinate systems** define the plane on which data are mapped on the graphic.
-   **Themes** modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.
:::

## 1.5 Essential Grammatical Elements in ggplot2: data

-   Let us call the `ggplot()` function using the code chunk on the right.

```{r}
ggplot(data=exam_data)
```

::: callout-note
-   Notice that a blank canvas appears.

-   `ggplot()` initializes a ggplot object.

-   The *data* argument defines the dataset to be used for plotting.

-   If the dataset is not already a data.frame, it will be converted to one by `fortify()`.
:::

##  1.6 Essential Grammatical Elements in ggplot2: [Aesthetic mappings](https://ggplot2.tidyverse.org/reference/aes.html)

-   The aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency.Each visual characteristic can thus encode an aspect of the data and be used to convey information.

-   All aesthetics of a plot are specified in the [`aes()`](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html) function call (in later part of this lesson, you will see that each *geom* layer can have its own aes specification)

-   Code chunk on the right add the aesthetic element into the plot.

```{r}
#| eval: false
#| code-line-numbers: "2"
ggplot(data=exam_data, 
       aes(x= MATHS))
```

::: callout-note
-   Notice that ggplot includes the x-axis and the axis's label.
:::


```{r}
#| echo: false
ggplot(data=exam_data, 
       aes(x= MATHS))
```


## 1.7 Essential Grammatical Elements in ggplot2: geom


Geometric objects are the actual marks we put on a plot. Examples include:
::: {style="font-size: 0.8em"}
-   *geom_point* for drawing individual points (e.g., a scatter plot)
-   *geom_line* for drawing lines (e.g., for a line charts)
-   *geom_smooth* for drawing smoothed lines (e.g., for simple trends or approximations)
-   *geom_bar* for drawing bars (e.g., for bar charts)
-   *geom_histogram* for drawing binned values (e.g. a histogram)
-   *geom_polygon* for drawing arbitrary shapes
-   *geom_map* for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).
:::



![](img/image6.jpg)

::: {style="font-size: 0.8em"}
-   A plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the **+** operator.
-   For complete list, please refer to [here](https://ggplot2.tidyverse.org/reference/#section-layer-geoms).
:::


### 1.7.1 Essential Grammatical Elements in ggplot2: [*geom_bar*](https://ggplot2.tidyverse.org/reference/geom_bar.html)

The code chunk below plots a bar chart by using `geom_bar()`.

```{r}
#| eval: false
#| code-line-numbers: "3"
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar()
```



```{r}
#| echo: false
ggplot(data=exam_data, aes(x=RACE)) +
  geom_bar()
```


### 1.7.2 Essential Grammatical Elements in ggplot2: geom_dotplot

In a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.

In the code chunk below, [`geom_dotplot()`](https://ggplot2.tidyverse.org/reference/geom_dotplot.html) of ggplot2 is used to plot a dot plot.

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(dotsize = 0.5)
```


::: callout-warning
### Be warned

The y scale is not very useful, in fact it is very misleading.
:::


::: callout-note
The code chunk below performs the following two steps:

-   `scale_y_continuous()` is used to turn off the y-axis, and
-   *binwidth argument* is used to change the binwidth to 2.5.
:::

```{r}
#| eval: false
#| code-line-numbers: "3-6"
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(binwidth=2.5,         
               dotsize = 0.5) +      
  scale_y_continuous(NULL,           
                     breaks = NULL)  
```


```{r}
#| echo: false
ggplot(data=exam_data, aes(x = MATHS)) +
  geom_dotplot(binwidth=2.5, dotsize = 0.5) +
  scale_y_continuous(NULL, breaks = NULL)
```


### 1.7.3. Essential Grammatical Elements in ggplot2s: `geom_histogram()`

In the code chunk below, [*geom_histogram()*](https://ggplot2.tidyverse.org/reference/geom_histogram.html) is used to create a simple histogram by using values in *MATHS* field of *exam_data*.

```{r}
#| eval: false
#| code-line-numbers: "3"
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_histogram()       
```

::: callout-note
Note that the default bin is **30**.
:::


```{r}
#| echo: false
#| fig-height: 6
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_histogram()
```


### 1.7.4. Modifying a geometric object by changing `geom()`

In the code chunk below,

-   *bins* argument is used to change the number of bins to 20,
-   *fill* argument is used to shade the histogram with light blue color, and
-   *color* argument is used to change the outline colour of the bars in black

```{r}
#| eval: false
#| code-line-numbers: "3-5"
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20,            
                 color="black",      
                 fill="light blue")  
```


```{r}
#| echo: false
#| fig-height: 6
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")
```


### 1.7.5 Modifying a geometric object by changing *aes()*


-   The code chunk below changes the interior colour of the histogram (i.e. *fill*) by using sub-group of *aesthetic()*.

```{r}
#| eval: false
#| code-line-numbers: "3"
ggplot(data=exam_data, 
       aes(x= MATHS, 
           fill = GENDER)) +
  geom_histogram(bins=20, 
                 color="grey30")
```

::: callout-note
This approach can be used to colour, fill and alpha of the geometric.
:::


```{r}
#| echo: false
#| fig-height: 6
ggplot(data=exam_data, 
       aes(x= MATHS, 
           fill = GENDER)) +
  geom_histogram(bins=20, 
                 color="grey30")
```


### 1.7.6. Geometric Objects: geom-density


[`geom-density()`](https://ggplot2.tidyverse.org/reference/geom_density.html) computes and plots kernel density estimate, which is a smoothed version of the histogram.

It is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.

The code below plots the distribution of Maths scores in a kernel density estimate plot.

```{r}
#| eval: false
#| code-line-numbers: "3"
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_density()           
```

Reference: [Kernel density estimation](https://en.wikipedia.org/wiki/Kernel_density_estimation)

```{r}
#| echo: false
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_density()
```




The code chunk below plots two kernel density lines by using *colour* or *fill* arguments of *aes()*

```{r, echo=TRUE, eval=FALSE, fig.width=8, fig.height=6}
#| eval: false
#| code-line-numbers: "3"
ggplot(data=exam_data, 
       aes(x = MATHS, 
           colour = GENDER)) +
  geom_density()
```

```{r}
#| echo: false
ggplot(data=exam_data, 
       aes(x = MATHS, 
           colour = GENDER)) +
  geom_density()
```




### 1.7.7. Geometric Objects: geom-boxplot


-   [`geom_boxplot()`](https://ggplot2.tidyverse.org/reference/geom_boxplot.html) displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all "outlying" points individually.\
-   The code chunk below plots boxplots by using *geom_boxplot()*.\]

```{r}
#| eval: false
#| code-line-numbers: "4"
ggplot(data=exam_data, 
       aes(y = MATHS,       
           x= GENDER)) +    
  geom_boxplot()            
```

```{r}
#| echo: false
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_boxplot()
```



**Notches** are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.

The code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.

```{r}
#| eval: false
#| code-line-numbers: "4"
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_boxplot(notch=TRUE)
```

Reference: [Notched Box Plots](https://sites.google.com/site/davidsstatistics/home/notched-box-plots).

```{r}
#| echo: false
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_boxplot(notch=TRUE)  
```



### 1.7.8 Essential Grammatical Elements in ggplot2: geom_violin


[`geom_violin`](https://ggplot2.tidyverse.org/reference/geom_violin.html) is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it's easier to compare several distributions since they're placed side by side.

The code below plot the distribution of Maths score by gender in violin plot.

```{r}
#| eval: false
#| code-line-numbers: "4"
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_violin()
```

```{r}
#| echo: false
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_violin() 
```



### 1.7.9 Essential Grammatical Elements in ggplot2: `geom_point()`

-   [`geom_point()`](https://ggplot2.tidyverse.org/reference/geom_point.html) is especially useful for creating scatterplot.
-   The code chunk below plots a scatterplot showing the Maths and English grades of pupils by using `geom_point()`.

```{r}
#| eval: false
#| code-line-numbers: "4"
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point()            
```

```{r}
#| echo: false
#| fig-height: 8
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point()
```

### 1.7.10.1. Essential Grammatical Elements in ggplot2s: `geom_violin()` and `geom_boxplot()`


The code chunk below combined a violin plot and a boxplot to show the distribution of Maths scores by gender.\]

```{r}
#| eval: false
#| code-line-numbers: "4-5"
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_violin(fill="light blue") +
  geom_boxplot(alpha=0.5)           
```


```{r}
#| echo: false
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_violin(fill="light blue") +
  geom_boxplot(alpha=0.5)
```


### 1.7.10.2 Essential Grammatical Elements in ggplot2: *geom* objects can be combined

The code chunk below plots the data points on the boxplots by using both `geom_boxplot()` and `geom_point()`.

```{r}
#| eval: false
#| code-line-numbers: "4-6"
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_boxplot() +              #<<      
  geom_point(position="jitter", #<<
             size = 0.5)        #<<
```


```{r}
#| echo: false
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_boxplot() +
  geom_point(position="jitter", 
             size = 0.5)
```


## 1.8. Essential Grammatical Elements in ggplot2: *stat*

-   The Statistics functions statistically transform data, usually as some form of summary. For example:
    -   frequency of values of a variable (bar graph)
    -   a mean
    -   a confidence limit
-   There are two ways to use these functions:
    -   add a `stat_()` function and override the default geom, or
    -   add a `geom_()` function and override the default stat.

### 1.8.1 Working with stat()

-   The boxplots on the right are incomplete because the positions of the means were not shown.

```{r}
#| echo: false
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot()
```

### 1.8.2 Working with stat - the *stat_summary()* method

The code chunk below adds mean values by using [`stat_summary()`](https://ggplot2.tidyverse.org/reference/stat_summary.html) function and overriding the default geom.

```{r}
#| eval: false
#| code-line-numbers: "4-7"
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot() +
  stat_summary(geom = "point",       
               fun.y="mean",         
               colour ="red",        
               size=4)               
```

```{r}
#| echo: false
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot() +
  stat_summary(geom = "point", 
               fun.y="mean", 
               colour ="red", 
               size=4)
```


### 1.8.3. Working with stat - the `geom()` method

The code chunk below adding mean values by using `geom_()` function and overriding the default stat.

```{r}
#| eval: false
#| code-line-numbers: "4-7"
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot() +
  geom_point(stat="summary",        
             fun.y="mean",           
             colour ="red",          
             size=4)          
```


```{r}
#| echo: false
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot() +
  geom_point(stat="summary", 
             fun.y="mean", 
             colour ="red", 
             size=4)
```


### 1.8.4 How to add a best fit curve on a scatterplot?


-   The scatterplot on the right shows the relationship of Maths and English grades of pupils.

-   The interpretability of this graph can be improved by adding a best fit curve.

```{r}
#| echo: false
#| fig-height: 8
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point()
```


In the code chunk below, [`geom_smooth()`](https://ggplot2.tidyverse.org/reference/geom_smooth.html) is used to plot a best fit curve on the scatterplot.

-   The default method used is *loess*.\]

```{r}
#| eval: false
#| code-line-numbers: "3"
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(size=0.5)
```

```{r}
#| echo: false
#| fig-height: 8
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(size=0.5)
```

The default smoothing method can be overridden as shown below.

```{r}
#| eval: false
#| code-line-numbers: "5-6"
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5)
```

```{r}
#| echo: false
#| fig-height: 8
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5)
```


## 1.9. Essential Grammatical Elements in ggplot2: Facets

-   Facetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data.

-   Facets are an alternative to aesthetics for displaying additional discrete variables.

-   ggplot2 supports two types of factes, namely: `facet_grid()` and `facet_wrap`.

### 1.9.1 Working with `facet_wrap()`

-   [`facet_wrap`](https://ggplot2.tidyverse.org/reference/facet_wrap.html) wraps a 1d sequence of panels into 2d.

-   This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.

The code chunk below plots a trellis plot using `facet-wrap()`.

```{r}
#| eval: false
#| code-line-numbers: "4"
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20) +
    facet_wrap(~ CLASS)
```

```{r}
#| echo: false
#| fig-height: 8
ggplot(data=exam_data, aes(x= MATHS)) +
  geom_histogram(bins=20) +
    facet_wrap(~ CLASS)
```

### `facet_grid()` function

-   [`facet_grid()`](https://ggplot2.tidyverse.org/reference/facet_grid.html) forms a matrix of panels defined by row and column facetting variables.

-   It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.


The code chunk below plots a trellis plot using `facet_grid()`.

```{r}
#| eval: false
#| code-line-numbers: "4"
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20) +
    facet_grid(~ CLASS)
```

```{r}
#| echo: false
#| fig-height: 4
#| fig-width: 15
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20) +
    facet_grid(~ CLASS)
```

## 1.10. Essential Grammatical Elements in ggplot2: Coordinates

-   The *Coordinates* functions map the position of objects onto the plane of the plot.

-   There are a number of different possible coordinate systems to use, they are:

    -   [`coord_cartesian()`](https://ggplot2.tidyverse.org/reference/coord_cartesian.html): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).
    -   [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html): a cartesian system with the x and y flipped.
    -   [`coord_fixed()`](https://ggplot2.tidyverse.org/reference/coord_fixed.html): a cartesian system with a "fixed" aspect ratio (e.g. 1.78 for a "widescreen" plot).
    -   [`coord_quickmap()`](https://ggplot2.tidyverse.org/reference/coord_map.html): a coordinate system that approximates a good aspect ratio for maps.

------------------------------------------------------------------------

### 1.10.1 Working with Coordinate

By the default, the bar chart of ggplot2 is in vertical form.

```{r}
#| echo: false
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar()
```

The code chunk below flips the horizontal bar chart into vertical bar chart by using `coord_flip()`.

```{r}
#| code-line-numbers: "4"
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip()
```



### 1.10.2 How to change to the y- and x-axis range?

The scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.

```{r}
#| echo: false
#| fig-height: 8
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, size=0.5)
```

The code chunk below fixed both the y-axis and x-axis range from 0-100.

```{r}
#| eval: false
#| code-line-numbers: "6-7"
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
```

```{r}
#| echo: false
#| fig-height: 8
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
```

## 1.11. Essential Grammatical Elements in ggplot2: Themes

Themes control elements of the graph not related to the data. For example:
::: {style="font-size: 0.8em"}
-   background colour
-   size of fonts
-   gridlines
-   colour of labels
:::
Built-in themes include:
-   `theme_gray()` (default)
-   `theme_bw()`
-   `theme_classic()`
A list of theme can be found at this [link](https://ggplot2.tidyverse.org/reference/ggtheme.html).
Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).

### 1.11.1 Working with theme

The code chunk below plot a horizontal bar chart using `theme_gray()`.

```{r}
#| eval: false
#| code-line-numbers: "5"
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_gray()
```

```{r}
#| echo: false
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_gray()
```

A horizontal bar chart plotted using `theme_classic()`.

```{r}
#| code-line-numbers: "5"
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_classic()
```


A horizontal bar chart plotted using `theme_minimal()`.

```{r}
#| code-line-numbers: "5"
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_minimal()
```

## 1.12. Reference

-   Hadley Wickham (2023) [**ggplot2: Elegant Graphics for Data Analysis**](https://ggplot2-book.org/). Online 3rd edition.
-   Winston Chang (2013) [**R Graphics Cookbook 2nd edition**](https://r-graphics.org/). Online version.
-   Healy, Kieran (2019) [**Data Visualization: A practical introduction**](https://socviz.co/). Online version
-   [Learning ggplot2 on Paper -- Components](https://henrywang.nl/learning-ggplot2-on-paper-components/)
-   [Learning ggplot2 on Paper -- Layer](https://henrywang.nl/learning-ggplot2-on-paper-layer/)
-   [Learning ggplot2 on Paper -- Scale](https://henrywang.nl/tag/learning-ggplot2-on-paper/)

```{r}
#| eval: false
#| echo: false
renderthis::to_pdf(from = "https://isss608-ay2022-23jan.netlify.app/hands-on_ex/Hands-on_Ex01/Hands-on_Ex01-ggplot2.html")
```
