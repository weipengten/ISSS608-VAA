{
  "hash": "bfb12305261f1f6d688cf73f08254bbb",
  "result": {
    "markdown": "---\ntitle: \"Take Home Exercise 3\"\nauthor: \"Ten Wei Peng\"\ndate: \"May 13, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\nformat:\n  html:\n    theme: cosmo\n---\n\n\n# **VAST Challenge 2024 : Mini-Challenge 2**\n\nSee link below for additional details on this challenge!\n\n<https://vast-challenge.github.io/2024/index.html>\n\n# **Project Brief**\n\nIn Oceanus, the routine life of islanders is defined by the movements of commercial fishing vessels, which usually indicate a healthy economy. However, this routine was disrupted when SouthSeafood Express Corp was caught fishing illegally, causing a significant scandal in the fishing community. FishEye International, a non-profit dedicated to combating illegal fishing, is collecting and analyzing data on ship movements and shipping records to understand this disruption better. They have compiled this data into CatchNet: the Oceanus Knowledge Graph. FishEye's analysts need assistance in creating analytical capabilities to make sense of this data and better understand local commercial fishing behavior.\n\n# **Project Objectives**\n\nThis study aims to use visual analytics to understand patterns of groups in the knowledge graph. This will endeavour to:\n\n-   **Task 2**- Develop visualizations that illustrate the inappropriate behavior of SouthSeafood Express Corp vessels. How do their movement and catch contents compare to other fishing vessels? When and where did SouthSeafood Express Corp vessels perform their illegal fishing? How many different types of suspicious behaviors are observed? Use visual evidence to justify your conclusions.\n\n-   **Task 3**- To support further Fisheye investigations, develop visual analytics workflows that allow you to discover other vessels engaging in behaviors similar to SouthSeafood Express Corp’s illegal activities? Provide visual evidence of the similarities.\n\n-   **Task 4**- How did fishing activity change after SouthSeafood Express Corp was caught? What new behaviors in the Oceanus commercial fishing community are most suspicious and why?\n\n# 1.Data Preparation\n\n## 1.1 Loading R Packages\n\nIn the code chunk, p_load() and [**pacman**](https://cran.r-project.org/web/packages/pacman/) package is used to load the required packages below:\n\n-   **tidyverse**\n\n    -   **Purpose**: A collection of R packages designed for data science, including `ggplot2`, `dplyr`, `tidyr`, `readr`, `purrr`, `tibble`, `stringr`, and `forcats`. These packages share an underlying design philosophy, grammar, and data structures.\n\n-   **sf**\n\n    -   **Purpose**: Simple Features for R, which provides support for handling spatial vector data. It enables manipulation and analysis of spatial data within the `tidyverse` framework.\n\n-   **lwgeom**\n\n    -   **Purpose**: Provides additional functionality for `sf` objects, leveraging the `liblwgeom` library. This is used for advanced spatial operations like validating geometries.\n\n-   **tmap**\n\n    -   **Purpose**: Thematic maps, which allows for flexible and powerful creation of thematic maps with an intuitive syntax.\n\n-   **units**\n\n    -   **Purpose**: Support for measurement units in R. This package allows for easy and explicit management of physical measurement units in data frames.\n\n-   **maps**\n\n    -   **Purpose**: Provides map data for the creation of maps in R. Useful for adding geographical context to visualizations.\n\n-   **igraph**\n\n    -   **Purpose**: A package for creating and manipulating graphs. It provides tools for network analysis and visualization.\n\n-   **tidygraph**\n\n    -   **Purpose**: Integrates tidy data principles into graph data structures. It allows for the manipulation of graph data using `dplyr` verbs.\n\n-   **ggraph**\n\n    -   **Purpose**: An extension of `ggplot2` for graph visualization. It is used for creating network graphs using the `ggplot2` grammar.\n\n-   **visNetwork**\n\n    -   **Purpose**: Interactive network visualization using the `vis.js` library. It allows for the creation of interactive network graphs.\n\n-   **lubridate**\n\n    -   **Purpose**: Simplifies the process of working with dates and times in R. It provides functions for parsing, manipulating, and doing arithmetic with date-time objects.\n\n-   **jsonlite**\n\n    -   **Purpose**: A robust, high-performance JSON parser and generator for R. It is used for converting between JSON data and R objects.\n\n-   **httr**\n\n    -   **Purpose**: A package for working with URLs and HTTP. It provides tools for making HTTP requests and interacting with web APIs.\n\n-   **viridis**\n\n    -   **Purpose**: Color maps designed to be perceptually uniform. It provides color scales that are particularly useful for heatmaps and other data visualizations.\n\n-   **plotly**\n\n    -   **Purpose**: Interactive web-based plots. It is used to create interactive plots that can be embedded in web pages or viewed in RStudio.\n\n-   **ggrepel**\n\n    -   **Purpose**: Provides geoms for ggplot2 to repel overlapping text labels. This helps in creating more readable plots by preventing text labels from overlapping.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\npacman::p_load(tidyverse, sf, lwgeom, tmap, units, maps, igraph, tidygraph, ggraph, visNetwork, lubridate, jsonlite, httr,tmap,viridis,plotly, ggrepel)\n```\n:::\n\n\n## 1.2. Loading the Data\n\n::: panel-tabset\n### Links\n\n**In this section, we will prepare our links dataset**\n\nIn this section, we use the`jsonlite` package to read our data in a JSON (JavaScript Object Notation) file named mc2_edited.json and convert it into an R object for further analysis and manipulation.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nmc2_data <- fromJSON(\"data/mc2_edited.json\")\n```\n:::\n\n\nWe first convert the **links** data from the JSON object into a tibble using `dplyr` and perform following transformations:\n\n-   **Removing Duplicates**: The `distinct()` function is used to ensure that only unique rows are retained in the dataset, removing any duplicate records.\n\n-   **Data Type Conversion**:\n\n    -   `source`, `target`, `type`, `dwell`, and `raw_source` are converted to character strings using `as.character()`.\n\n    -   `time` is converted to a POSIXct date-time object with the format `%Y-%m-%dT%H:%M:%OS` and time zone `UTC` to ensure proper handling of time data.\n\n    -   `date` is converted to a Date object with the format `%Y-%m-%d`.\n\n    -   `ping_date` is derived from the `time` column, also converted to a Date object after transforming it to POSIXct format.\n\n-   **Column Selection**: The `select()` function is used to keep only the relevant columns for further analysis, specifically `type`, `time`, `dwell`, `source`, `target`, `date`, `ping_date`, and `raw_source`.\n\n-   **Aggregation and Filtering**:\n\n    -   **Grouping**: The data is grouped by `source`, `target`, and `type` to prepare for aggregation.\n\n    -   **Summarizing**: The `summarise()` function calculates the number of interactions (weights) between each pair of `source` and `target` for each `type`.\n\n    -   **Filtering**: The `filter()` function removes any rows where the `source` is the same as the `target`, eliminating self-loops in the network.\n\n    -   **Ungrouping**: Finally, the `ungroup()` function ensures that the resulting dataset is no longer grouped, making it easier to work with in subsequent steps.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nmc2_links_prep <- as_tibble(mc2_data$links) %>%\n  distinct() %>%\n  mutate(source = as.character(source),\n         target = as.character(target),\n         type = as.character(type),\n         dwell = as.character(dwell),\n         raw_source = as.character(raw_source),\n         time =  as.POSIXct(time, format=\"%Y-%m-%dT%H:%M:%OS\", tz=\"UTC\"),\n         date = as.Date(as.character(date), format = \"%Y-%m-%d\"),\n         ping_date = as.Date(as.POSIXct(time, format=\"%Y-%m-%dT%H:%M:%OS\", tz=\"UTC\"))) %>%\n  select(type, time, dwell, source, target, date, ping_date)\n\n\nmc2_links <- mc2_links_prep%>%\n  group_by(source, target, type) %>%\n  summarise(weights = n(), .groups = 'drop') %>%\n  filter(source != target) %>%\n  ungroup()\n```\n:::\n\n\n### Nodes\n\n**In this section, we will prepare our nodes dataset**\n\nSimilarly, we extract the **nodes** data from the JSON object into a tibble and perform the following transformations to the data:\n\n-   **Type Original**: A new column `type_original` is created to store the original values of the `type` column.\n\n-   **Data Type Conversion**: Several columns are converted to appropriate data types:\n\n    -   `id` and `type` are converted to character strings.\n\n    -   `tonnage` and `length_overall` are converted to numeric values after ensuring they are in character format.\n\n    -   `Activities`, `fish_species_present`, `kind`, `flag_country`, `company`, `raw_source`, and `name` are converted to character strings.\n\n    -   `last_edited_by`, `last_edited_date`, and `date_added` are converted to POSIXct date-time objects using the `strptime` function to parse the dates correctly.\n\n-   **Type Classification**: The `type` column is recategorized to a more general \"Entity.Vessel\" if the original `type` falls into specific vessel categories such as \"Entity.Vessel.CargoVessel,\" \"Entity.Vessel.Ferry.Cargo,\" \"Entity.Vessel.FishingVessel,\" or \"Entity.Vessel.Other.\" If the `type` does not match these categories, it remains unchanged.\n\n-   **Column Selection**: The final step is selecting relevant columns for further analysis. The selected columns include `id`, `type`, `type_original`, `namee`, `company`, `flag_country`, `Activities`, `tonnage`, `length_overall`, `raw_source`, `fish_species_present`, and `kind`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert nodes to tibble, modify variable types, and select required columns\nmc2_nodes <- as_tibble(mc2_data$nodes) %>%\n  mutate(\n    type_original = type,\n    id = as.character(id), \n    type = as.character(type),\n    type = case_when(\n      type %in% c(\"Entity.Vessel.CargoVessel\", \"Entity.Vessel.Ferry.Cargo\", \"Entity.Vessel.FishingVessel\", \"Entity.Vessel\", \"Entity.Vessel.Other\") ~ \"Entity.Vessel\",\n      TRUE ~ type\n    ),\n    tonnage = as.numeric(as.character(tonnage)),\n    length_overall = as.numeric(as.character(length_overall)), \n    Activities = as.character(Activities), \n    fish_species_present = as.character(fish_species_present), \n    kind = as.character(kind), \n    flag_country = as.character(flag_country),\n    company = as.character(company),\n    raw_source = as.character(raw_source),\n    namee = as.character(name), \n    last_edited_by = as.POSIXct(strptime(as.character(last_edited_by), format = \"%Y-%m-%dT%H:%M:%OS\")),\n    last_edited_date = as.POSIXct(strptime(as.character(last_edited_date), format = \"%Y-%m-%dT%H:%M:%OS\")),\n    date_added = as.POSIXct(strptime(as.character(date_added), format = \"%Y-%m-%dT%H:%M:%OS\"))\n  ) %>%\n  select(id, type,type_original, namee, company, flag_country, Activities, tonnage, length_overall, fish_species_present, kind)\n```\n:::\n\n\n::: callout-note\nWe save our processed data into .rds data format files using the write_rds() of readr package. The output file is saved in rds sub-folder. We do this to reduce the loading time and more importantly, we can avoid uploading the large raw files onto GitHub.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(mc2_links_prep, \"data/rds/mc2_links_prep.rds\")\nmc2_links_prep <- read_rds(\"data/rds/mc2_links_prep.rds\")\n\nwrite_rds(mc2_links, \"data/rds/mc2_links.rds\")\nmc2_links <- read_rds(\"data/rds/mc2_links.rds\")\n\nwrite_rds(mc2_nodes, \"data/rds/mc2_nodes.rds\")\nmc2_nodes <- read_rds(\"data/rds/mc2_nodes.rds\")\n```\n:::\n\n:::\n\n## 1.3. Data Cleaning\n\n::: panel-tabset\n### Links\n\nWe discovered that the columns \"type,\" \"source,\" and \"target\" are complete, containing no missing values. Conversely, the columns \"time,\" \"dwell,\" \"date,\" and \"ping_date\" exhibit numerous missing values. This outcome is anticipated since these columns exclusively hold data for specific categories.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check for columns with missing values\ncolSums(is.na(mc2_links_prep))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     type      time     dwell    source    target      date ping_date \n        0     13101     13101         0         0    258542     13101 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nsummary(mc2_links_prep)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     type                time                           dwell          \n Length:271643      Min.   :2035-02-01 00:00:00.00   Length:271643     \n Class :character   1st Qu.:2035-04-17 13:33:02.35   Class :character  \n Mode  :character   Median :2035-06-28 19:34:55.25   Mode  :character  \n                    Mean   :2035-06-30 22:13:03.65                     \n                    3rd Qu.:2035-09-13 13:44:34.00                     \n                    Max.   :2035-11-30 00:00:00.00                     \n                    NA's   :13101                                      \n    source             target               date           \n Length:271643      Length:271643      Min.   :2035-02-01  \n Class :character   Class :character   1st Qu.:2035-07-25  \n Mode  :character   Mode  :character   Median :2035-09-19  \n                                       Mean   :2035-08-29  \n                                       3rd Qu.:2035-10-26  \n                                       Max.   :2035-11-30  \n                                       NA's   :258542      \n   ping_date         \n Min.   :2035-02-01  \n 1st Qu.:2035-04-17  \n Median :2035-06-28  \n Mean   :2035-06-30  \n 3rd Qu.:2035-09-13  \n Max.   :2035-11-30  \n NA's   :13101       \n```\n:::\n:::\n\n\nNext, we ensure there are no duplicated rows\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nmc2_links[duplicated(mc2_links),]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 0 × 4\n# ℹ 4 variables: source <chr>, target <chr>, type <chr>, weights <int>\n```\n:::\n:::\n\n\nLet's try to understand how our links data is categorized into. It seems there are three categories of data as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nunique_type <- unique(mc2_links$type)\nprint(unique_type)\n```\n:::\n\n\n**Define a function to count and print unique categories for a given column.**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ncount_unique_categories <- function(data, column_name) {\n  cat(\"**\", column_name, \"**\\n\", sep = \"\")\n  category_counts <- table(data[[column_name]])\n  sorted_counts <- sort(category_counts, decreasing = TRUE)\n  print(sorted_counts)\n}\n```\n:::\n\n\n### Nodes\n\nLet's take a look into our nodes dataframe.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nglimpse(mc2_nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 5,637\nColumns: 11\n$ id                   <chr> \"gadusnspecificatae4ba\", \"piscesfrigus900\", \"pisc…\n$ type                 <chr> \"Entity.Commodity.Fish\", \"Entity.Commodity.Fish\",…\n$ type_original        <chr> \"Entity.Commodity.Fish\", \"Entity.Commodity.Fish\",…\n$ namee                <chr> \"Cod/Gadus n.specificatae\", \"Birdseye/Pisces frig…\n$ company              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ flag_country         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Activities           <chr> \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"…\n$ tonnage              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ length_overall       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ fish_species_present <chr> \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"…\n$ kind                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"city\", \"…\n```\n:::\n:::\n\n\nAgain, it's hard to make sense if these missing values are actually important due ot the nature of the data. We shall handle it as it goes. However, the main columns we are interested in id and type are not missing any data.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Check for columns with missing values\ncolSums(is.na(mc2_nodes))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  id                 type        type_original \n                   0                    0                    0 \n               namee              company         flag_country \n                5627                 5458                 5341 \n          Activities              tonnage       length_overall \n                   0                 5359                 5354 \nfish_species_present                 kind \n                   0                 5613 \n```\n:::\n:::\n\n\nThere does not seem to be any whole duplicate rows.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nmc2_nodes[duplicated(mc2_nodes),]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 0 × 11\n# ℹ 11 variables: id <chr>, type <chr>, type_original <chr>, namee <chr>,\n#   company <chr>, flag_country <chr>, Activities <chr>, tonnage <dbl>,\n#   length_overall <dbl>, fish_species_present <chr>, kind <chr>\n```\n:::\n:::\n\n\nIt seems we have many types of nodes even after grouping more of the Vessel types into our generic \"Entity.Vessel\". It seems \"Entity.Commodity.Fish\",'Entity.Vessel', 'Entity.Location.Point', 'Entity.Location.City', 'Entity.Location.Region' will be important for us.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nunique_type <- unique(mc2_nodes$type)\nprint(unique_type)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ncount_unique_categories(mc2_nodes, 'type') \ncount_unique_categories(mc2_nodes, 'flag_country') \ncount_unique_categories(mc2_nodes, 'kind') \n```\n:::\n\n\nThere are 100 companies found in our dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount_unique_companies <- length(unique(mc2_nodes$company))\ncount_unique_companies\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n```\n:::\n:::\n\n\n### Geographical Information\n\nThe code below snippet employs the sf package to read and manipulate GeoJSON data. It uses `st_read()` to import the GeoJSON file and renames the column \"Name\" to \"id\" using rename() from the dplyr package.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Read the GeoJSON file\ngeojson_file <- \"data/Oceanus Information/Oceanus Geography.geojson\"\ngeo_data <- st_read(geojson_file) %>%\n  rename(id = Name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `Oceanus Geography' from data source \n  `C:\\weipengten\\ISSS608\\ISSS608-VAA\\Take-Home_Ex\\Take-Home_Ex03\\data\\Oceanus Information\\Oceanus Geography.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 29 features and 7 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -167.0654 ymin: 38.07452 xmax: -163.2723 ymax: 40.67775\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n\nUsing `tmap` we create a basic plot of our locations we are interested in.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Visualize the geographical data with tmap\ntmap_mode(\"plot\")\n\ntm_shape(geo_data) +\n  tm_polygons(alpha = 0.5) +\n  tm_borders(lwd = 1, alpha = 0.5) +\n  tm_layout(frame = FALSE) +\n  tmap_style(\"gray\") +\n  tm_shape(geo_data) +\n  tm_dots(col = \"purple\", size = 0.2) +\n  tm_text(text = \"id\", size = 0.6, col = \"black\") +  # Add labels to the locations\n  tm_layout(legend.position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex03_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n:::\n\n## Task 2 (part 1) : EDA\n\n::: panel-tabset\n### Filter and Prepare Data\n\n#### Extracting Commodity Fish Data\n\nThis code segment focuses on filtering and preparing data for exploratory data analysis (EDA), particularly concerning commodity fish species in specific regions. It utilizes several packages within the tidyverse ecosystem.\n\nFirstly, the `dplyr` package is employed for data manipulation tasks. Two main operations are performed:\n\n1.  **Filtering Commodity Fish Data:** The `filter()` function is used to extract rows from the `mc2_nodes` dataframe where the type is \"Entity.Commodity.Fish\". This isolates data relevant to commodity fish species.\n\n2.  **Extracting Fish Species Data:** Another subset of data is extracted for locations (\"Entity.Location.Region\" type) and processed to extract individual fish species. This involves several steps:\n\n    -   The `filter()` function extracts rows where the type is \"Entity.Location.Region\".\n\n    -   The `mutate()` function modifies the data, removing unnecessary characters from the \"fish_species_present\" column and splitting the string into individual fish species using regular expressions (`str_remove_all()` and `str_split()`).\n\n    -   The `unnest()` function expands the list of fish species.\n\n    -   Further data cleaning is done with `mutate()` and `rename()` functions to ensure consistency and readability.\n\nFollowing data preparation, a function named `get_commodity_fish_ids()` is defined. This function retrieves commodity fish IDs for specific regions. It takes optional arguments for regions and utilizes the preprocessed `fishspecies_expanded` dataframe to filter and extract relevant fish species IDs based on specified regions.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ncommodityfish <- mc2_nodes %>%\n  filter(type == \"Entity.Commodity.Fish\")\n\n# Extract and transform Fish Species data\nfishspecies_expanded <- mc2_nodes %>%\n  filter(type == \"Entity.Location.Region\") %>%\n  mutate(Fish_Species = str_remove_all(fish_species_present, 'c\\\\(|\\\\)|\"')) %>%\n  mutate(Fish_Species = str_split(Fish_Species, \",\\\\s*\")) %>%\n  unnest(Fish_Species) %>%\n  mutate(Fish_Species = str_trim(Fish_Species)) %>%\n  rename(Region = id)\n\n# Join with Commodity Fish data\nfishspecies_expanded <- fishspecies_expanded %>%\n  left_join(commodityfish, by = c(\"Fish_Species\" = \"namee\")) %>%\n  select(Region, Fish_Species, id)\n\n# Function to get commodity fish IDs for specific regions\nget_commodity_fish_ids <- function(..., regions = NULL) {\n  fishspecies_expanded %>%\n    filter(Region %in% c(..., regions)) %>%\n    pull(id)\n}\n```\n:::\n\n\n#### Preparing Harbor Report Data.\n\nThis code filters data from mc2_links_prep to isolate harbor report events involving particular vessels (\"snappersnatcher7be\" and \"roachrobberdb6\"). It renames columns for clarity and selects only relevant columns, focusing on the city, vessel, event type, and reporting date. Overall, it streamlines the extraction and organization of data crucial for analyzing harbor activities related to specific vessels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nharboureport_culprit<- mc2_links_prep %>%\n  filter(type == \"Event.HarborReport\") %>%\n  filter(source %in% c(\"snappersnatcher7be\",\"roachrobberdb6\")) %>%\n  rename(vessel = source) %>%\n  rename(city = target) %>%\n  rename(harboreporting_date = date) %>%\n  select(city, vessel, type, harboreporting_date)\n```\n:::\n\n\n#### Processing Transaction Data\n\nRetrieve and process transaction data to identify suspicious transactions.\n\nLet's retrieve the `Transaction` data by applying the filter `type == \"Event.Transaction\"` for our links data\n\nWe then perform a self-join on the transaction dataset on `source` column to get the respective `city` and `fish` column for each cargo delivery, filtering for only the two cities we observed earlier 'City of Paackland', 'City of Lomark' which `snappersnatcher7b` frequented.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Retrieve and process transaction data\ntransactions <- mc2_links_prep %>%\n  filter(type == \"Event.Transaction\") %>%\n  filter(!is.na(source) & !is.na(target)) %>%\n  group_by(source) %>%\n  mutate(row_number = row_number()) %>%\n  pivot_wider(names_from = row_number, values_from = target) %>%\n  rename(city = `2`, fish = `1`) %>%\n  rename(transaction_date = date) %>%\n  select(source, fish, city, type, transaction_date) %>%\n  inner_join(commodityfish, by = c(\"fish\" = \"id\"))\n```\n:::\n\n\nNo duplicated transaction records were found after the self-join\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nduplicated_transactions <- transactions[duplicated(transactions$source), ]\nduplicated_transactions\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 0 × 15\n# Groups:   source [0]\n# ℹ 15 variables: source <chr>, fish <chr>, city <chr>, type.x <chr>,\n#   transaction_date <date>, type.y <chr>, type_original <chr>, namee <chr>,\n#   company <chr>, flag_country <chr>, Activities <chr>, tonnage <dbl>,\n#   length_overall <dbl>, fish_species_present <chr>, kind <chr>\n```\n:::\n:::\n\n\n#### Filtering and Preparing Nodes and Links\n\nThis code segment filters and prepares data from mc2_nodes and mc2_links dataframes, focusing on specific types of entities such as vessels, points, cities, and regions, while excluding vessels not associated with \"SouthSeafood Express Corp\". It further filters mc2_links data to retain only transport events, transactions, and harbor reports. Then, it extracts relevant node IDs and filters edges to ensure consistency, removing any missing nodes from the filtered links. Overall, this process ensures that the data is tailored for subsequent analysis, particularly in the context of transportation and harbor activities involving specific entities.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Filter and prepare nodes\nmc2_nodes_suspect <- mc2_nodes %>%\n  filter(type %in% c('Entity.Vessel', 'Entity.Location.Point', 'Entity.Location.City', 'Entity.Location.Region')) %>%\n  filter(!(type == 'Entity.Vessel' & company != \"SouthSeafood Express Corp\"))\n\n# Filter and prepare nodes\nmc2_links_filtered <- mc2_links %>%\n  filter(type %in% c('Event.TransportEvent.TransponderPing','Event.Transaction',\"Event.HarborReport\"))\n\n# Extract relevant node IDs\nfiltered_node_ids <- mc2_nodes_suspect$id\n\n# Filter and prepare edges\nmc2_links_suspect <- mc2_links_filtered %>%\n  filter(source %in% filtered_node_ids & target %in% filtered_node_ids)\n\n# Ensure no missing nodes in the filtered links\nmissing_nodes <- setdiff(unique(c(mc2_links_suspect$source, mc2_links_suspect$target)), mc2_nodes_suspect$id)\nif(length(missing_nodes) > 0) {\n  mc2_links_suspect <- mc2_links_suspect %>%\n    filter(!source %in% missing_nodes & !target %in% missing_nodes)\n}\n```\n:::\n\n\n### Construct the Graph\n\nThis code block utilizes the `tidygraph` package to construct a graph (`mc2_graph`) with filtered nodes and edges from the `mc2_nodes_suspect` and `mc2_links_suspect` dataframes, respectively. Here's a brief summary:\n\n1.  **Creating Graph:** The `tbl_graph()` function from `tidygraph` constructs a graph using the filtered nodes and edges, specifying it as a directed graph (`directed = TRUE`).\n\n2.  **Centrality Metrics:** Three centrality metrics—betweenness centrality, closeness centrality, and degree centrality—are calculated for each node using the `centrality_betweenness()`, `centrality_closeness()`, and `centrality_degree()` functions, respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Create the graph with filtered nodes and edges\nmc2_graph <- tbl_graph(nodes = mc2_nodes_suspect, edges = mc2_links_suspect, directed = TRUE) %>%\n  mutate(betweenness_centrality = centrality_betweenness(),\n         closeness_centrality = centrality_closeness(),\n         degree_centrality = centrality_degree())\n```\n:::\n\n\nThis code block filters the `mc2_graph` to include only nodes with edges, then visualizes the filtered graph using the `ggraph` package. The size of nodes corresponds to their degree centrality, and their color indicates their type. Node labels are added with `geom_node_text()`, and colors are customized for different node types. The visualization provides insights into the activities of SouthSeafood Express Corp, with a focus on different types of entities and their centrality within the network.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Filter the graph to include only nodes with edges\nmc2_graph_with_edges <- mc2_graph %>%\n  filter(!node_is_isolated())\n\n# Visualization with filtered nodes\nmc2_graph_with_edges %>%\n  ggraph(layout = \"fr\") +\n  geom_edge_link(aes(alpha = 0.5), show.legend = FALSE) +\n  geom_node_point(aes(\n    size = degree_centrality,\n    color = type,\n    alpha = 0.3)) +\n  geom_node_text(aes(label = id), repel = TRUE, size = 3, vjust = 1.5) +  # Add labels to nodes\n  scale_size_continuous(range = c(1, 10)) +\n  scale_color_manual(values = c(\"Entity.Vessel\" = \"blue\", \n                                \"Entity.Location.Point\"= \"red\",\n                                \"Entity.Location.Region\" =\"green\",\n                                \"Entity.Location.City\" = \"lightblue\"\n                                )) +\n  labs(title = \"SouthSeafood Express Corp's Activities\",\n       color = \"Node Type\",\n       size = \"Degree Centrality\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex03_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n### Interactive VIsualisation\n\nThis code aggregates edge data from `mc2_links_suspect`, filters out isolated nodes, and prepares the data for visualization. It utilizes the `visNetwork` function from the `visNetwork` package to create an interactive network visualization. Nodes and edges are represented based on the filtered data, with options for selecting nodes by type and highlighting nearest nodes. The resulting visualization offers insights into the network structure and relationships among different entities involved in the analyzed activities.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Aggregate edges data\nmc2_links_suspect <- mc2_links_suspect %>%\n  left_join(mc2_nodes_suspect, by = c(\"source\" = \"id\")) %>%\n  rename(from = source) %>%\n  left_join(mc2_nodes_suspect, by = c(\"target\" = \"id\")) %>%\n  rename(to = target) %>%\n  group_by(from, to) %>%\n  summarise(weight = sum(weights)) %>%\n  filter(from != to) %>%\n  filter(weight > 1) %>%\n  ungroup()\n\nconnected_nodes <- unique(c(mc2_links_suspect$from, mc2_links_suspect$to))\n\n# Filter out isolated nodes\nmc2_nodes_suspect <- mc2_nodes_suspect %>%\n  filter(id %in% connected_nodes) %>%\n  rename(group = type) %>%\n  mutate(label = ifelse(group %in% c('Entity.Vessel', 'Entity.Location.Point', 'Entity.Location.City',\"Entity.Location.Region\"), id, NA)) %>%\n  group_by(company) %>%\n  mutate(id1 = if_else(group == \"Entity.Vessel\" & company != \"\" & !is.na(company),\n                       paste0(company, row_number()),\n                       if_else(group == \"Entity.Vessel\" & (company == \"\" | is.na(company)), id, NA_character_)),\n         id1 = if_else(group != \"Entity.Vessel\", id, id1)) %>%\n  ungroup()\n\n\n### Visualize the Graph\n\n# Visualize the resulting graph\nvisNetwork(mc2_nodes_suspect, mc2_links_suspect) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123) %>%\n  visOptions(highlightNearest = list(enabled = TRUE, degree = 1),\n             nodesIdSelection = TRUE,\n             selectedBy = \"type\")  # Add type dropdown\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"visNetwork html-widget html-fill-item\" id=\"htmlwidget-edb8332b2d95b925773d\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-edb8332b2d95b925773d\">{\"x\":{\"nodes\":{\"id\":[\"City of Lomark\",\"City of Himark\",\"City of Paackland\",\"snappersnatcher7be\",\"roachrobberdb6\",\"Nav A\",\"Nav C\",\"Nav 2\",\"Nav 1\",\"Exit East\",\"Nav E\",\"Cod Table\",\"Ghoti Preserve\",\"Wrasse Beds\"],\"group\":[\"Entity.Location.City\",\"Entity.Location.City\",\"Entity.Location.City\",\"Entity.Vessel\",\"Entity.Vessel\",\"Entity.Location.Point\",\"Entity.Location.Point\",\"Entity.Location.Point\",\"Entity.Location.Point\",\"Entity.Location.Point\",\"Entity.Location.Point\",\"Entity.Location.Region\",\"Entity.Location.Region\",\"Entity.Location.Region\"],\"type_original\":[\"Entity.Location.City\",\"Entity.Location.City\",\"Entity.Location.City\",\"Entity.Vessel.FishingVessel\",\"Entity.Vessel.FishingVessel\",\"Entity.Location.Point\",\"Entity.Location.Point\",\"Entity.Location.Point\",\"Entity.Location.Point\",\"Entity.Location.Point\",\"Entity.Location.Point\",\"Entity.Location.Region\",\"Entity.Location.Region\",\"Entity.Location.Region\"],\"namee\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"company\":[null,null,null,\"SouthSeafood Express Corp\",\"SouthSeafood Express Corp\",null,null,null,null,null,null,null,null,null],\"flag_country\":[null,null,null,\"Oceanus\",\"Oceanus\",null,null,null,null,null,null,null,null,null],\"Activities\":[\"c(\\\"Deep sea fishing\\\", \\\"Commercial fishing\\\", \\\"Tourism\\\", \\\"Shipping\\\")\",\"Recreation, tourism\",\"c(\\\"Industry\\\", \\\"Fishing industry\\\", \\\"Local shipping\\\", \\\"Tourism\\\", \\\"Research\\\", \\\"Sport fishing\\\")\",\"NULL\",\"NULL\",\"Navigation\",\"Navigation\",\"Navigation\",\"Navigation\",\"c(\\\"International shipping\\\", \\\"Deep sea fishing\\\")\",\"Navigation\",\"Commercial fishing\",\"c(\\\"Research\\\", \\\"Tourism\\\", \\\"Recreation\\\")\",\"Commercial fishing\"],\"tonnage\":[null,null,null,100,11700,null,null,null,null,null,null,null,null,null],\"length_overall\":[null,null,null,20,130,null,null,null,null,null,null,null,null,null],\"fish_species_present\":[\"NULL\",\"NULL\",\"NULL\",\"NULL\",\"NULL\",\"NULL\",\"NULL\",\"NULL\",\"NULL\",\"NULL\",\"NULL\",\"c(\\\"Cod/Gadus n.specificatae\\\", \\\"Birdseye/Pisces frigus\\\", \\\"Beauvoir/Habeas pisces\\\")\",\"c(\\\"Wrasse/Labridae n.refert\\\", \\\"Beauvoir/Habeas pisces\\\", \\\"Helenaa/Pisces satis\\\", \\\"Offidiaa/Piscis osseus\\\")\",\"c(\\\"Wrasse/Labridae n.refert\\\", \\\"Birdseye/Pisces frigus\\\", \\\"Beauvoir/Habeas pisces\\\")\"],\"kind\":[\"city\",\"city\",\"city\",null,null,\"buoy\",\"buoy\",\"buoy\",\"buoy\",\"buoy\",\"buoy\",\"Fishing Ground\",\"Ecological Preserve\",\"Fishing Ground\"],\"label\":[\"City of Lomark\",\"City of Himark\",\"City of Paackland\",\"snappersnatcher7be\",\"roachrobberdb6\",\"Nav A\",\"Nav C\",\"Nav 2\",\"Nav 1\",\"Exit East\",\"Nav E\",\"Cod Table\",\"Ghoti Preserve\",\"Wrasse Beds\"],\"id1\":[\"City of Lomark\",\"City of Himark\",\"City of Paackland\",\"SouthSeafood Express Corp1\",\"SouthSeafood Express Corp2\",\"Nav A\",\"Nav C\",\"Nav 2\",\"Nav 1\",\"Exit East\",\"Nav E\",\"Cod Table\",\"Ghoti Preserve\",\"Wrasse Beds\"],\"x\":[-0.1921588760204673,-1,0.6795870664563477,0.2455390365134982,-0.4693911032485671,-0.9969503730875415,0.0787311684484111,0.988599539610755,-0.4913253405388295,-0.2349606756132449,-0.411513148058645,1,0.2314909951094049,0.2174320660054336],\"y\":[0.01900676601901341,-0.4760391393869103,0.885270656404747,0.3805189049933002,-0.395848104058212,-0.8753006167130394,-0.08224043595550123,0.6052841166255416,0.1630816338536709,0.8590106693861477,-1,0.214245972416433,1,-0.2766138131495822]},\"edges\":{\"from\":[\"City of Himark\",\"City of Lomark\",\"City of Lomark\",\"Cod Table\",\"Exit East\",\"Ghoti Preserve\",\"Nav 1\",\"Nav 1\",\"Nav 2\",\"Nav A\",\"Nav C\",\"Nav C\",\"Nav E\",\"Wrasse Beds\",\"Wrasse Beds\",\"roachrobberdb6\",\"roachrobberdb6\",\"snappersnatcher7be\",\"snappersnatcher7be\"],\"to\":[\"roachrobberdb6\",\"roachrobberdb6\",\"snappersnatcher7be\",\"snappersnatcher7be\",\"snappersnatcher7be\",\"snappersnatcher7be\",\"roachrobberdb6\",\"snappersnatcher7be\",\"snappersnatcher7be\",\"roachrobberdb6\",\"roachrobberdb6\",\"snappersnatcher7be\",\"roachrobberdb6\",\"roachrobberdb6\",\"snappersnatcher7be\",\"City of Himark\",\"City of Lomark\",\"City of Lomark\",\"City of Paackland\"],\"weight\":[23,6,20,102,44,4,2,37,42,4,229,31,14,222,9,2,7,2,4]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":false},\"physics\":{\"stabilization\":false},\"layout\":{\"randomSeed\":123}},\"groups\":[\"Entity.Location.City\",\"Entity.Vessel\",\"Entity.Location.Point\",\"Entity.Location.Region\"],\"width\":null,\"height\":null,\"idselection\":{\"enabled\":true,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false,\"variable\":\"type\",\"main\":\"Select by type\"},\"main\":null,\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"igraphlayout\":{\"type\":\"square\"},\"legend\":{\"width\":0.2,\"useGroups\":true,\"position\":\"left\",\"ncol\":1,\"stepX\":100,\"stepY\":100,\"zoom\":true},\"highlight\":{\"enabled\":true,\"hoverNearest\":false,\"degree\":1,\"algorithm\":\"all\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":false,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n:::\n\n## Task 2 (part 2) : Deep Investigations into \"snappersnatcher7b\"\n\n::: panel-tabset\n### 1. Fish Species in Ghoti Preserve\n\nFrom the EDA/ visualisation earlier, it seems `\"snappersnatcher7be\"` frequents:\n\n-   Locations: `\"Nav1\"`, `\"Nav2\"` which is extremely near `\"Ghoti Preserve\"`\n\n-   Region: `\"Wrasse Beds\"` , `\"Ghoti Preserve\"`, `\"Cod Table\"`\n\n-   City: `City of Paackland` and `City of Lomark`\n\nHence, let's identify the fish species commonly found in the \"Ghoti Preserve\" region.\n\nIn `\"Ghoti Preserve\"`, these are the fish species that commonly found. The names are as below:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Retrieve unique fish species in Ghoti Preserve\nunique_fish_species_ghoti <- fishspecies_expanded %>%\n  filter(Region == \"Ghoti Preserve\") %>%\n  pull(Fish_Species) %>%\n  unique()\n\n# Print the unique Fish_Species\nprint(unique_fish_species_ghoti)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Wrasse/Labridae n.refert\" \"Beauvoir/Habeas pisces\"  \n[3] \"Helenaa/Pisces satis\"     \"Offidiaa/Piscis osseus\"  \n```\n:::\n:::\n\n\n### 2. Suspicious Transactions\n\nMerge the transactions with HarborReport data to identify relevant suspicious transactions.\n\nNext, we proceed with the HarborReport data by applying filter type == `Event.HarborReport` to our links dataset and retrieve only`snappersnatcher7b`'s records then merge with transactions dataset to filter out relevant suspicious transactions given the fact that the harbor reports are likely to be a few days after the transaction.\n\nNote that, this is a rough merge on city, hence we are just narrowing down and end up with likely pairs of transactions with snappersnatcher7be's harbor reporting to guess its cargo\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Retrieve HarborReport data for \"snappersnatcher7be\"\nharboureport_culprit<- mc2_links_prep %>%\n  filter(type == \"Event.HarborReport\") %>%\n  filter(source ==\"snappersnatcher7be\") %>%\n  rename(vessel = source) %>%\n  rename(city = target) %>%\n  rename(harboreporting_date = date) %>%\n  select(city, vessel, type, harboreporting_date)\n\n\n# Merge with transactions and apply filter condition\nmerged_data <- merge(transactions, harboureport_culprit, by = \"city\", all.x = TRUE)\n\n\nfiltered_transactions <- merged_data %>%\n  filter(harboreporting_date >= transaction_date + 1 &  # Change the number based on your lag\n         harboreporting_date <= transaction_date + 3) %>%\n  select(namee, fish, city,harboreporting_date,transaction_date, vessel)\n```\n:::\n\n\n\"Cod/Gadus n.specificatae\" was filtered out as it is a commonly found in legal fishing areas. Then, we merged this filtered data with another dataframe named fishspecies_expanded based on a common column, namely \"namee\" and \"Fish_Species\" respectively.Finally, we extract unique regions from the merged data and prints them.\n\nThe output displays the unique regions found in the merged dataset, which are \"Ghoti Preserve,\" \"Nemo Reef,\" and \"Wrasse Beds.\" These are the likely fishing grounds the vessels should be found.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Filter out entries where namee is not \"Cod/Gadus n.specificatae\"\nfiltered_transactions <- filtered_transactions %>%\n  filter(namee != \"Cod/Gadus n.specificatae\")\n\n\njoined_data <- merge(filtered_transactions, fishspecies_expanded, by.x = \"namee\", by.y = \"Fish_Species\", all.x = TRUE)\nunique_regions <- unique(joined_data$Region)\nunique_regions\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Ghoti Preserve\" \"Nemo Reef\"      \"Wrasse Beds\"   \n```\n:::\n:::\n\n\nWe generate a timeline plot illustrating suspicious transactions and harbor reports associated with the vessel \"snappersnatcher7be,\" showcasing the relationship between transaction dates, cargo types, vessels, and cities involved.\n\nIt's likely to have made transactions of cargo \"Wrasse/Labridae n.refert\" within thisdate range shown.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Create the timeline plot\nggplot(filtered_transactions)  +\n  geom_segment(aes(x = transaction_date, xend = harboreporting_date, y = namee, yend = namee, color = vessel), size = 1.5) +\n  geom_point(aes(x = transaction_date, y = namee, color = vessel, shape = city), size = 3) +\n  labs(title = \"Suspicious Transactions and Harbor Reports for snappersnatcher7be\", x = \"Date\", y = \"Cargo Type\") +\n  theme_minimal() +\n  scale_color_discrete(name = \"Vessel\") +\n  scale_shape_discrete(name = \"City\") +  # Add legend for city\n  theme(\n    plot.title = element_text(hjust = 0, face = \"bold\"),  # Align the title to the left\n    plot.title.position = \"plot\"                          # Ensure title alignment is based on the entire plot area\n  )\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex03_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n### 3. Suspicious Findings\n\nFrom our observations, \"snappersnatcher7be\" is likely carrying the following cargo:\n\n-   \"Cod/Gadus n.specificatae\" around 20th March and\n\n-   \"Wrasse/Labridae n.refert\" around 8th May\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nprint(unique(filtered_transactions$namee))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Wrasse/Labridae n.refert\"\n```\n:::\n:::\n\n\nAdditionally, we found its transportation activities suspicious due to its frequent visits to \"Ghoti Preserve\":\n\n-   `\"Nav 1\"`: 17 occurences\n-   `\"Nav 2\"`: 7 occurences\n\nFor legitimate occurrences related to \"Wrasse/Labridae n.refert\", there's fewer:\n\n-   `\"Nav C\"`: 10 occurences\n-   `\"Wrasse Beds\"`: 3 occurences\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Retrieve TransponderPing data for \"snappersnatcher7be\"\ntransponder_culprit <- mc2_links_prep %>%\n  filter(type == \"Event.TransportEvent.TransponderPing\",\n         target == \"snappersnatcher7be\",\n         time <= \"2035-05-09\",\n         time >= \"2035-04-09\")\n\n# Count unique categories in the 'source' column\ncount_unique_categories(transponder_culprit, 'source') \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n**source**\n\n        Cod Table         Exit East             Nav 2             Nav C \n               37                18                17                10 \n            Nav 1    City of Lomark       Wrasse Beds City of Paackland \n                7                 5                 3                 1 \n```\n:::\n:::\n\n\n#### Bar Plot for Suspicious and Legitimate Transportation Activities\n\nWe plotted a bar plot illustrating transportation activities associated with the entity \"snappersnatcher7be,\" distinguishing between suspicious and legitimate locations as described above.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Data for transportation activities\nlocation_counts <- transponder_culprit %>%\n  filter(!source %in% c('Cod Table', 'Exit East',\"City of Paackland\", \"City of Lomark\")) %>% \n  group_by(source) %>%\n  summarise(Occurrences = n()) %>%\n  ungroup() %>%\n  rename(Location = source) %>%\n  mutate(Type = case_when(\n    Location %in% c(\"Nav 1\", \"Nav 2\") ~ \"Suspicious\",\n    TRUE ~ \"Legitimate\"\n  ))\n\n# Reorder Location factor levels so \"Suspicious\" locations appear at the top\nlocation_counts <- location_counts %>%\n  mutate(Location = factor(Location, levels = unique(Location[order(Type, decreasing = TRUE)])))\n\n# Bar plot for transportation activities\nggplot(location_counts, aes(x = Occurrences, y = Location, fill = Type)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Transportation Activities of snappersnatcher7be\", x = \"Number of Occurrences\", y = \"Location\") +\n  scale_fill_manual(values = c(\"Suspicious\" = \"red\", \"Legitimate\" = \"blue\")) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0, face = \"bold\"),  # Align the title to the left\n    plot.title.position = \"plot\"                          # Ensure title alignment is based on the entire plot area\n  )\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex03_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n#### Geographical Plot for Suspicious and Legitimate Transportation Activities\n\nBelow, is the geographical representation of what we found to be legitmate and suspicious locations for the vessel.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nlocation_counts <- transponder_culprit %>%\n  filter(source %in% c('Cod Table', 'Exit East',\"City of Paackland\", \"City of Lomark\",\"Nav 1\", \"Nav 2\", \"Ghoti Preserve\", \"Exit East\", \"Nav C\", \"Wrasse Beds\", \"Don Limpet Preserve\")) %>% \n  group_by(source) %>%\n  summarise(Occurrences = n()) %>%\n  ungroup() %>%\n  rename(Location = source) %>%\n  mutate(Marked = case_when(\n    Location %in% c(\"Nav 1\", \"Nav 2\") ~ \"Suspicious\",   TRUE ~ \"Legitimate\"\n  )) %>%\n  mutate(Location = factor(Location, levels = unique(Location[order(Marked, decreasing = TRUE)])))  # Reorder Location factor levels\n\n# Merge location counts with geo data\ngeo_data_0 <- left_join(geo_data, location_counts, by = c(\"id\" = \"Location\"))\n\n# Extract coordinates from geometry data\ncoords_0 <- st_coordinates(st_centroid(geo_data_0))\n\n# Add coordinates to the geo_data\ngeo_data_0$Longitude <- coords_0[,1]\ngeo_data_0$Latitude <- coords_0[,2]\n\n\n# Filter for specific IDs to label\nlabel_ids_0 <- c('Cod Table', 'Exit East', 'City of Paackland', 'City of Lomark', 'Nav 1', 'Nav 2', 'Ghoti Preserve', 'Exit East', 'Nav C', 'Wrasse Beds', 'Don Limpet Preserve')\ngeo_data_labels_0 <- geo_data_0 %>%\n  filter(id %in% label_ids_0)\n\n# Set plot size (for RStudio or other environments that support resizing)\noptions(repr.plot.width = 10, repr.plot.height = 8)\n\n# Geographical plot with labels\nggplot() +\n  geom_sf(data = geo_data_labels_0, aes(geometry = geometry, color = Marked)) +\n  geom_text(data = geo_data_labels_0 , aes(x = Longitude, y = Latitude, label = id), size = 2, color = \"black\", fontface = \"bold\") +\n  scale_color_manual(values = c(\"Suspicious\" = \"red\", \"Legitimate\" = \"blue\")) +\n  labs(title = \"Geographical Plot of snappersnatcher7be Activities\") +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 16),  # Enlarge title\n        legend.title = element_text(size = 12),  # Enlarge legend title\n        legend.text = element_text(size = 10),  # Enlarge legend text\n        axis.text = element_text(size = 10),  # Enlarge axis text\n        axis.title = element_text(size = 12))  # Enlarge axis title\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex03_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n:::\n\n## Task 2 (part 3) : Deep Investigations into \"roachrobberdb6\"\n\n::: panel-tabset\n### 1. Suspicious Transactions\n\nMerge the transactions with HarborReport data to identify relevant suspicious transactions.\n\nNext, we proceed with the HarborReport data by applying filter type == `Event.HarborReport` to our links dataset and retrieve only`roachrobberdb6`'s records then merge with transactions dataset to filter out relevant suspicious transactions given the fact that the harbor reports are likely to be a few days after the transaction.\n\nNote that, this is a rough merge on city, hence we are just narrowing down and end up with likely pairs of transactions with roachrobberdb6's harbor reporting to guess its cargo\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Retrieve HarborReport data for \"roachrobberdb6\"\nharboureport_culprit1<- mc2_links_prep %>%\n  filter(type == \"Event.HarborReport\") %>%\n  filter(source ==\"roachrobberdb6\") %>%\n  rename(vessel = source) %>%\n  rename(city = target) %>%\n  rename(harboreporting_date = date) %>%\n  select(city, vessel, type, harboreporting_date)\n\n\n# Merge with transactions and apply filter condition\nmerged_data1 <- merge(transactions, harboureport_culprit1, by = \"city\", all.x = TRUE)\n\n\nfiltered_transactions1 <- merged_data1 %>%\n  filter(harboreporting_date >= transaction_date + 1 &  # Change the number based on your lag\n         harboreporting_date <= transaction_date + 3) %>%\n  select(namee, fish, city,harboreporting_date,transaction_date, vessel)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter out entries where namee is not \"Cod/Gadus n.specificatae\"\nfiltered_transactions1 <- filtered_transactions1 %>%\n  filter(namee != \"Cod/Gadus n.specificatae\")\n\n\njoined_data <- merge(filtered_transactions1, fishspecies_expanded, by.x = \"namee\", by.y = \"Fish_Species\", all.x = TRUE)\nunique_regions <- unique(joined_data$Region)\nunique_regions\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Tuna Shelf\"     \"Ghoti Preserve\" \"Wrasse Beds\"    \"Nemo Reef\"     \n```\n:::\n:::\n\n\nWe generate a timeline plot illustrating suspicious transactions and harbor reports associated with the vessel \"roachrobberdb6,\" showcasing the relationship between transaction dates, cargo types, vessels, and cities involved.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Create the timeline plot\nggplot(filtered_transactions1) +\n  geom_segment(aes(x = transaction_date, xend = harboreporting_date, y = namee, yend = namee, color = vessel), size = 1.5) +\n  geom_point(aes(x = transaction_date, y = namee, color = vessel, shape = city), size = 3) +\n  labs(title = \"Suspicious Transactions and Harbor Reports for roachrobberdb6\", x = \"Date\", y = \"Cargo Type\") +\n  theme_minimal() +\n  scale_color_discrete(name = \"Vessel\") +\n  scale_shape_discrete(name = \"City\") +  # Add legend for city\n  theme(\n    plot.title = element_text(hjust = 0, face = \"bold\"),  # Align the title to the left\n    plot.title.position = \"plot\"                          # Ensure title alignment is based on the entire plot area\n  )\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex03_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n### 2. No Suspicious Findings\n\nFrom our observations previously, \"roachrobberdb6\" is likely carrying the following cargo:\n\n-   \"Wrasse/Labridae n.refert\" around February and April\n\n-   \"Harland/Piscis sapidum\" in April\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nprint(unique(filtered_transactions1$namee))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Wrasse/Labridae n.refert\" \"Harland/Piscis sapidum\"  \n```\n:::\n:::\n\n\nWe did not manage to find its fishing activities suspicious between the period however for the date range. It is likely not to be suspicious.\n\n-   `\"Nav C\"`: 38 occurences\n-   `\"Wrasse Beds\"`: 42 occurences\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Retrieve TransponderPing data for \"roachrobberdb6\"\ntransponder_culprit1 <- mc2_links_prep %>%\n  filter(type == \"Event.TransportEvent.TransponderPing\",\n         target == \"roachrobberdb6\",\n         time <= \"2035-04-05\",\n         time >= \"2035-03-20\")\n\n# Count unique categories in the 'source' column\ncount_unique_categories(transponder_culprit1, 'source') \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n**source**\n\n   Wrasse Beds          Nav C City of Himark City of Lomark \n            40             35              2              2 \n```\n:::\n:::\n\n\n#### Bar Plot for Suspicious and Legitimate Transportation Activities\n\nWe plotted a bar plot illustrating transportation activities associated with the entity \"roachrobberdb6,\" distinguishing between suspicious and legitimate locations as described above.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Data for transportation activities\nlocation_counts1 <- transponder_culprit1 %>%\n  filter(!source %in% c('Cod Table', 'Exit East',\"City of Paackland\", \"City of Lomark\",\"City of Himark\")) %>% \n  group_by(source) %>%\n  summarise(Occurrences = n()) %>%\n  ungroup() %>%\n  rename(Location = source) %>%\n  mutate(Type = case_when(\n    Location %in% c(\"Nav 1\", \"Nav 2\") ~ \"Suspicious\",\n    TRUE ~ \"Legitimate\"\n  ))\n\n# Reorder Location factor levels so \"Suspicious\" locations appear at the top\nlocation_counts1 <- location_counts1 %>%\n  mutate(Location = factor(Location, levels = unique(Location[order(Type, decreasing = TRUE)])))\n\n# Bar plot for transportation activities\nggplot(location_counts1, aes(x = Occurrences, y = Location, fill = Type)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Transportation Activities of roachrobberdb6\", x = \"Number of Occurrences\", y = \"Location\") +\n  scale_fill_manual(values = c(\"Suspicious\" = \"red\", \"Legitimate\" = \"blue\")) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0, face = \"bold\"),  # Align the title to the left\n    plot.title.position = \"plot\"                          # Ensure title alignment is based on the entire plot area\n  )\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex03_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\n#### Geographical Visualisation\n\nBelow, is the geographical representation of what we found to be legitmate and suspicious locations for the vessel.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Create location_counts1 with the Marked column\nlocation_counts1 <- transponder_culprit1 %>%\n  filter(source %in% c('Cod Table', 'Exit East',\"City of Paackland\", \"City of Lomark\",\"Nav 1\", \"Nav 2\", \"Ghoti Preserve\", \"Exit East\", \"Nav C\", \"Wrasse Beds\", \"Don Limpet Preserve\",\"Nemo Preserve\",\"Tuna Shelf\")) %>% \n  group_by(source) %>%\n  summarise(Occurrences = n()) %>%\n  ungroup() %>%\n  rename(Location = source) %>%\n  mutate(Marked = case_when(\n    Location %in% c(\"Nav 1\", \"Nav 2\") ~ \"Suspicious\",   \n    TRUE ~ \"Legitimate\"\n  )) %>%\n  mutate(Location = factor(Location, levels = unique(Location[order(Marked, decreasing = TRUE)])))  # Reorder Location factor levels\n\n# Merge location counts with geo_data to include the Marked column\ngeo_data_1 <- left_join(geo_data, location_counts1, by = c(\"id\" = \"Location\"))\n\n# Extract coordinates from geometry data\ncoords_1 <- st_coordinates(st_centroid(geo_data_1))\n# Warning: st_centroid assumes attributes are constant over geometries\n\n# Add coordinates to the geo_data\ngeo_data_1$Longitude <- coords_1[,1]\ngeo_data_1$Latitude <- coords_1[,2]\n\n# Filter for specific IDs to label\nlabel_ids <- c('Cod Table', 'Exit East', 'City of Paackland', 'City of Lomark', 'Nav 1', 'Nav 2', 'Ghoti Preserve', 'Exit East', 'Nav C', \"Wrasse Beds\", \"Don Limpet Preserve\",\"Nemo Preserve\",\"Tuna Shelf\")\ngeo_data_labels_1 <- geo_data_1 %>%\n  filter(id %in% label_ids)\n\n# Set plot size (for RStudio or other environments that support resizing)\noptions(repr.plot.width = 10, repr.plot.height = 8)\n\n# Geographical plot with labels\nggplot() +\n  geom_sf(data = geo_data_labels_1, aes(geometry = geometry, color = geo_data_labels_1$Marked)) +\n  geom_text(data = geo_data_labels_1 , aes(x = Longitude, y = Latitude, label = id), size = 2, color = \"black\", fontface = \"bold\") +\n  scale_color_manual(values = c(\"Suspicious\" = \"red\", \"Legitimate\" = \"blue\")) +\n  labs(title = \"Geographical Plot of roachrobberdb6 Activities\") +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 16),  # Enlarge title\n        legend.title = element_text(size = 12),  # Enlarge legend title\n        legend.text = element_text(size = 10),  # Enlarge legend text\n        axis.text = element_text(size = 10),  # Enlarge axis text\n        axis.title = element_text(size = 12))  # Enlarge axis title\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex03_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n:::\n\n## Task 2 (part 4) : Suspicious Trajectories\n\nIn this section, we conduct an analysis of vessel trajectories to identify suspicious activities, particularly focusing on the operations of SouthSeafood Express Corp.\n\nTo begin, we extract transponder ping data, which provides information on vessel movements. We preprocess this data, assigning numeric values to locations and filtering out irrelevant areas such as Haacklee, Himark, Port Grove, Lomark, Paackland, and South Paackland.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Extract transponder ping data for vessel movements\ntransponder_pings <- mc2_links_prep %>%\n  filter(type == \"Event.TransportEvent.TransponderPing\") %>%\n  rename(location = source, vessel = target, ping_date = ping_date) %>%\n  mutate(ping_id = row_number(),  # Add a unique identifier for each row\n         location = case_when(\n           location == \"City of Haacklee\" ~ \"Haacklee\",\n           location == \"City of Himark\" ~ \"Himark\",\n           location == \"City of Port Grove\" ~ \"Port Grove\",\n           location == \"City of Lomark\" ~ \"Lomark\",\n           location == \"City of Paackland\" ~ \"Paackland\",\n           location == \"City of South Paackland\" ~ \"South Paackland\",\n           TRUE ~ location  # Keep original value if none of the above conditions are met\n         ))\n```\n:::\n\n\nNext, we calculate the start and end times for each vessel's journey, which allows us to determine the duration and locations visited by each vessel.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Join with mc2_nodes to get the company information\ntransponder_ping_df <- transponder_pings %>%\n  inner_join(mc2_nodes %>% select(id, company), by = c(\"vessel\" = \"id\")) %>% \n  mutate(date =ping_date,\n         start_time = time)\n\n# Calculate end_time by vessel\ndata <- transponder_ping_df %>%\n  group_by(vessel) %>%\n  arrange(start_time) %>%\n  mutate(end_time = lead(start_time)) %>%\n  filter(date >= as.Date(\"2035-05-01\") & date <= as.Date(\"2035-05-10\"))%>%\n  ungroup() %>%\n  select(date, start_time, end_time, location, vessel,company)\n\n# Remove rows where end_time is NA (last observation for each vessel)\ndata <- data %>% filter(!is.na(end_time))%>% filter(!is.na(company))\n\n# Now you have start_time and end_time calculated for each vessel\n\n# Assign numeric values to locations for plotting purposes \ndata$location_factor <- as.factor(data$location) \ndata$location_num <- as.numeric(data$location_factor)\n```\n:::\n\n\nAfter preprocessing, we plot the trajectories of two vessels, \"snappersnatcher7be\" and \"roachrobberdb6,\" using ggplot. In the ggplot visualization, we showcase the vessels' paths over time, along with location labels and customized color coding for each vessel. `ggrepel` was used to ensure that the labels not overlap.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ncombined_data <- data %>%\n  filter(vessel %in% c(\"snappersnatcher7be\", \"roachrobberdb6\")) %>%\n  arrange(vessel, date)\n\n# Create a line plot of vessel location over time\nggplot(combined_data, aes(x = date, y = location_num, color = vessel)) +\n  geom_line() +\n  geom_point(size = 2) +  # Add points for each location\n  geom_text_repel(aes(label = location), size = 3) +  # Add labels with repelling\n  labs(title = \"SouthSeafood Express Corp Vessel's  Trajectories Over Time\",\n       x = \"Time\", y = \"Location\", color = \"Vessel\") +\n  theme_minimal() +\n  scale_color_manual(values = c(\"snappersnatcher7be\" = \"blue\", \"roachrobberdb6\" = \"green\"))  # Define custom colors for each vessel\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex03_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n**Important Observations**\n\n-   Through this visualization, we discerned a notable trend: both vessels frequently intersect at Nav3. This observation suggests a potential area for further investigation into the activities of SouthSeafood Express Corp. The consistent intersection of these vessels raises questions about the nature of their interactions at this location. This finding prompts us to delve deeper into the activities and operations of SouthSeafood Express Corp, as it may indicate coordinated movements or potential transshipment activities between the vessels. Further scrutiny of these intersecting points could uncover crucial insights into the company's operational strategies and shed light on any illicit activities that may be occurring.\n:::\n\nIn the following section, we utilize several packages to prepare and process the data. We primarily use the `sf` package for handling spatial data, the `dplyr` package for data manipulation, and the `ggplot2` package for data visualization. Additionally, we employ the `tmap` package to create interactive thematic maps.\n\nHere's a summary of the technical steps:\n\n**Data Validation and Joining**: We validate the geometries of the geographical data and join the node data with the geographical data based on the location identifier.\n\n**Conversion to sf Object**: We convert the resulting data frame into an sf object using the st_as_sf function from the sf package.\n\n**Coordinates Extraction**: We extract coordinates for plotting the trajectories of the vessels \"snappersnatcher7be\" and \"roachrobberdb6\" separately using the st_coordinates function.\n\n**Data Combination**: We combine the data for both vessels into a single data frame using the bind_rows function from the dplyr package.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Validate geometries\ngeo_data <- geo_data %>%\n  st_make_valid()\n\n# Join node data\nmc2_nodes_geo <- data %>%\n  left_join(geo_data, by = c(\"location\" = \"id\"))\n\n# Convert the resulting data frame to sf object\nmc2_nodes_geo_sf <- st_as_sf(mc2_nodes_geo)\n\n# Extract coordinates for plotting for geometries\nsnappersnatcher7be_sf <- mc2_nodes_geo_sf %>%\n  mutate(Longitude = st_coordinates(st_centroid(geometry))[, 1],\n         Latitude = st_coordinates(st_centroid(geometry))[, 2]) %>%\n  filter(vessel == \"snappersnatcher7be\")\n\nroachrobberdb6_sf <- mc2_nodes_geo_sf %>%\n  mutate(Longitude = st_coordinates(st_centroid(geometry))[, 1],\n         Latitude = st_coordinates(st_centroid(geometry))[, 2]) %>%\n  filter(vessel == \"roachrobberdb6\")\n\n# Combine data for both vessels\ncombined_sf <- bind_rows(snappersnatcher7be_sf, roachrobberdb6_sf)\n```\n:::\n\n\n**Tmap Mode Setting**: We set the `tmap` mode to \"plot\" using the tmap_mode function from the tmap package.\n\n**Map Creation with tmap**: We create a thematic map using tmap functions such as tm_shape, tm_borders, and tm_symbols. This map includes borders around each shape, symbols for nodes, and a watercolor style background.\n\n**Plot Creation with ggplot**: We create a ggplot with the geom_sf function to plot the geographical data, geom_path to plot the vessel trajectories, and geom_text to add labels to the plot. We also customize the plot aesthetics such as colors and legend titles using functions like scale_color_manual and labs.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Set tmap mode\ntmap_mode(\"plot\")\n\ngeo_data <- st_as_sf(geo_data, coords = c(\"Longitude\", \"Latitude\"), crs = 4326)\n\n\n# Create the ggplot with the legend for vessels\nggplot() +\n  geom_sf(data = geo_data, aes(geometry = geometry), color = \"black\", size = 0.5, fill = NA) +  # Plot borders\n  geom_point(data = combined_sf, aes(x = Longitude, y = Latitude, color = vessel), size = 3) +  # Plot points\n  geom_path(data = combined_sf, aes(x = Longitude, y = Latitude, color = vessel, group = vessel), size = 1) +  # Plot paths\n  geom_text(data = combined_sf, aes(x = Longitude, y = Latitude, label = location), size = 3, vjust = -1) +  # Add labels\n  scale_color_manual(values = c(\"snappersnatcher7be\" = \"green\", \"roachrobberdb6\" = \"blue\")) +  # Colors for different vessels\n  labs(x = \"Longitude\", y = \"Latitude\", title = \"SouthSeafood Express Corp Vessel Trajectories\", color = \"Vessel\") +  # Add legend title\n  coord_sf() +  # Use coord_sf for spatial data\n  theme_minimal()  # Mi\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex03_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n## Task 2 (part 5) : Insights from Visualisations\n\n::: callout-note\n**Suspicious Movement and Catch Contents of SouthSeafood Express Corp**\n\n-   **Movement Patterns**:\n\n-   The vessel \"snappersnatcher7be\" shows frequent visits to suspicious locations such as \"Nav 1\" (17 occurrences) and \"Nav 2\" (7 occurrences), which are near \"Ghoti Preserve\".\n\n-   The visualization illustrates a significant number of transshipment events involving vessels associated with \"SouthSeafood Express Corp.\" These events, occurring over a period of time, indicate a pattern of coordinated activities suggestive of illicit practices.The plotted data reveals a consistent trend of transshipment occurrences over time, which deviates significantly from normal maritime operations. The frequency and pattern of these events suggest deliberate efforts to transfer goods between vessels, potentially for illegal purposes such as smuggling or avoiding regulatory oversight.\n\n-   **Catch Contents**:\n\n-   The vessel \"snappersnatcher7be\" is suspected of carrying cargo such as \"Wrasse/Labridae n.refert\" which is found only in \"Ghoti Preserve\" , \"Wrasse Beds\" and \"Nemo Reef.\" However, our visualisation reveals that it does not venture near \"Nemo Reef\" and it spends an equal amount of time at \"Wrasse Beds\" and locations near \"Ghoti Preserve\"\n:::\n\n::: callout-note\n**Timing and Locations of Illegal Fishing Activities for SouthSeafood Express Corp**\n\n-   **Timeframe of Illegal Activities**:\n\n-   Around May 8th, \"snappersnatcher7be\" is likely involved in suspicious cargo activities involving \"Wrasse/Labridae n.refert\". Hence, we suspect it conducted illegal fishing in the month previous.\n\n-   **Locations of Illegal Fishing**:\n\n-   The vessel's frequent visits to \"Nav 1\" and \"Nav 2\" suggest these locations are hotspots for illegal activities.\n\n-   These locations are close to \"Ghoti Preserve\", a region known for fish species like \"Wrasse/Labridae n.refert\".\n:::\n\n::: callout-note\n**Suspicious vessel tragejctories found likely to indicate transshipping**\n\n-   The trajectories of both vessels belonging to SouthSeafood Express Corp appear to intersect at specific points in time, particularly at Nav C. This presents a compelling indication of transshipment taking place.\n:::\n\n## Task 3:\n\nIn the previous analysis, we conducted an assessment of transshipment activities, which led us to identify SouthSeafood Express Corp as suspicious. This finding suggested a potential involvement in illegal fishing activities and we decided to analyze if other companies exhibit the same patterns.\n\n#### 1. Defining Transshipment\n\n-   **Transshipment** refers to the transfer of cargo from one vessel to another while at sea. For our analysis, we define a transshipment event as occurring when multiple vessels from the same company are present at the same location on the same date, excluding cities\n\n#### 2. Process\n\n-   **Identified transshipment** points by grouping the data and filtering for locations with multiple vessels.\n\n-   **Counted transshipment** instances by grouping the filtered data by company and date, ensuring that multiple events on the same day are counted as one.\n\n-   **Evaluated the results** by summarizing the number of unique transshipment days for each company.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Step 1: Firstly, let's recreate the dataframe earlier but with a larger date range\ndata <- transponder_ping_df %>%\n  group_by(vessel) %>%\n  arrange(start_time) %>%\n  mutate(end_time = lead(start_time)) %>%\n  filter(date >= as.Date(\"2035-02-01\") & date <= as.Date(\"2035-05-10\"))%>%\n  ungroup() %>%\n  select(date, start_time, end_time, location, vessel,company)\n\n# Remove rows where end_time is NA (last observation for each vessel)\ndata <- data %>% filter(!is.na(end_time))%>% filter(!is.na(company))\n\n# Now you have start_time and end_time calculated for each vessel\n\n# Assign numeric values to locations for plotting purposes \ndata$location_factor <- as.factor(data$location) \ndata$location_num <- as.numeric(data$location_factor)\n\n\n\n# Step 2: Identify transshipment points\nexcluded_locations <- c(\"Haacklee\", \"Himark\", \"Port Grove\", \"Lomark\", \"Paackland\", \"South Paackland\")\n\ntransshipment_data <- data %>%\n  filter(!location %in% excluded_locations) %>%\n  group_by(company, date, location) %>%\n  summarise(vessels_at_location = n_distinct(vessel), .groups = 'drop') %>%\n  filter(vessels_at_location > 1)\n\n# Step 3: Count transshipment instances grouped by company, considering each day with transshipment as one instance\ntransshipment_count <- transshipment_data %>%\n  group_by(company, date) %>%\n  summarise(transshipment = n_distinct(date), .groups = 'drop') %>%\n  group_by(company) %>%\n  summarise(transshipment_days = n(), .groups = 'drop')\n```\n:::\n\n\nThe transshipment_count data frame is used for creating the column chart.\n\n**Plotting the Column Chart**: We use ggplot() to initiate the plotting process. Inside aes(), we define the aesthetic mappings, where x represents the companies reordered by the number of transshipment days, y represents the number of transshipment days, and fill is used to differentiate between companies. We then add geom_col() to create the column chart.\n\n**Labels and Titles**: We add appropriate labels and titles to the plot using labs(), specifying the title, x-axis label, and y-axis label.\n\n**Theme Settings**: We adjust the theme of the plot using theme_minimal() to achieve a clean and minimalist appearance. Additionally, we rotate the x-axis text labels by 90 degrees using theme(axis.text.x = element_text(angle = 90, hjust = 1)) to prevent overlap.\n\n**Legend**: We remove the legend for the fill aesthetic using guides(fill = \"none\") since the fill color does not convey additional information in this specific chart.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Create a column chart\nggplot(transshipment_count, aes(x = reorder(company, -transshipment_days), y = transshipment_days, fill = company)) +\n  geom_col() +\n  labs(title = \"Number of Transshipment Days by Company\",\n       x = \"Company\",\n       y = \"Transshipment Days\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +\n  guides(fill = \"none\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex03_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n**Important Observations**\n\n-   Approximately 45 companies have shown indications of engaging in transshipment activities. Given that transshipment often correlates with illegal fishing practices, this suggests that these 45 companies may be violating fishing regulations.\n:::\n\n## Task 4:\n\nIn this section, we recreate the data and transshipment_data by processing the dataframe (transponder_ping_df) to analyze transshipment activities of vessels, this time for a larger date range. We aim to split the data into two periods: before and after SouthSeafood Express Corp was caught, likely around May 16, 2035.\n\nThe goal is to identify new companies involved in transshipment activities after the catch date by comparing the companies from both periods, highlighting potential new entrants to transshipment following the crackdown on SouthSeafood Express Corp.\n\n::: callout-note\n**Other considerations**\n\nHowver, since it is unlikely that companies restart illegal operations immediately after they are caught, we set the cutoff date to two months after SouthSeafood Express Corp was caught instead as 2035-07-12.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ndata <- transponder_ping_df %>%\n  group_by(vessel) %>%\n  arrange(start_time) %>%\n  mutate(end_time = lead(start_time)) %>%\n  filter(date >= as.Date(\"2035-02-01\") & date <= as.Date(\"2035-10-10\"))%>%\n  ungroup() %>%\n  select(date, start_time, end_time, location, vessel,company)\n\n# Remove rows where end_time is NA (last observation for each vessel)\ndata <- data %>% filter(!is.na(end_time))%>% filter(!is.na(company))\n\n# Now you have start_time and end_time calculated for each vessel\n\n# Assign numeric values to locations for plotting purposes \ndata$location_factor <- as.factor(data$location) \ndata$location_num <- as.numeric(data$location_factor)\n\n\n\n# Step 2: Identify transshipment points\nexcluded_locations <- c(\"Haacklee\", \"Himark\", \"Port Grove\", \"Lomark\", \"Paackland\", \"South Paackland\")\n\ntransshipment_data <- data %>%\n  filter(!location %in% excluded_locations) %>%\n  group_by(company, date, location) %>%\n  summarise(vessels_at_location = n_distinct(vessel), .groups = 'drop') %>%\n  filter(vessels_at_location > 1)\n\n\n\n# Filter transshipment data after the date when SouthSeafood Express Corp was caught\nafter_catch_date_and2months <- transshipment_data %>%\n  filter(date >= as.Date(\"2035-07-12\"))  # Adjust the date as per your data\n\n# Identify unique companies involved in transshipment after the catch date\nunique_companies_after_catch <- after_catch_date_and2months %>%\n  distinct(company)\n\n# Filter transshipment data before the catch date\nbefore_catch_date_and2months <- transshipment_data %>%\n  filter(date < as.Date(\"2035-07-11\"))  # Adjust the date as per your data\n\n# Check if any of the companies after the catch date are new\nnew_companies <- unique_companies_after_catch %>%\n  filter(!company %in% before_catch_date_and2months$company)\n\n# Print new companies starting transshipment after SouthSeafood Express Corp was caught\nprint(new_companies)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 1\n  company               \n  <chr>                 \n1 Tainamarine Fishing Co\n2 Taylor-Sawyer         \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Step 1: Filter transshipment data for the new vessels found\nnew_vessels_transshipment <- transshipment_data %>%\n  filter(company %in% new_companies$company) %>%\n  group_by(company, date) %>%\n  summarise(transshipment = n_distinct(date), .groups = 'drop') %>%\n  group_by(company) %>%\n  summarise(transshipment_days = n(), .groups = 'drop')\n\n\n\n\n# Create a column chart\nggplot(new_vessels_transshipment, aes(x = reorder(company, -transshipment_days), y = transshipment_days, fill = company)) +\n  geom_col() +\n  labs(title = \"Number of Transshipment Days by Company\",\n       x = \"Company\",\n       y = \"Transshipment Days\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +\n  guides(fill = \"none\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex03_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n\n\nWe have identified two potential companies that might be the same entity as SouthSeafood Express Corp, which was caught red-handed and likely restarted their illegal fishing operations. These companies are `Tainamarine Fishing Co` and `Taylor-Sawyer`, both of which are found to be of suspicious of transhippment activities and also began operations within 2-3 months after SouthSeafood Express Corp was apprehended.\n\nAmong them, `Tainamarine Fishing Co` seemed to be the most likely suspect as the two vessels belonging to it swimmingsafely92d and posiedonsparadise7e6 possesses the same tonnage and length_overall as snappersnatcher7be and roachrobberdb6 respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninfo <- mc2_nodes %>%\n  filter(company %in% c(\"Tainamarine Fishing Co\", \"SouthSeafood Express Corp\"))\n\n# Select the relevant columns for tonnage and length_overall\ninfo %>%\n  select(id, company, tonnage, length_overall)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 4\n  id                   company                   tonnage length_overall\n  <chr>                <chr>                       <dbl>          <dbl>\n1 snappersnatcher7be   SouthSeafood Express Corp     100             20\n2 swimmingsafely92d    Tainamarine Fishing Co        100             20\n3 roachrobberdb6       SouthSeafood Express Corp   11700            130\n4 posiedonsparadise7e6 Tainamarine Fishing Co      11700            130\n```\n:::\n:::\n\n\nIn the next section, we proceeded further to investigate `Tainamarine Fishing Co` by plotting its vessel trajectories over time. This in turn led to some interesting findings.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ndata <- transponder_ping_df %>%\n  group_by(vessel) %>%\n  arrange(start_time) %>%\n  mutate(end_time = lead(start_time)) %>%\n  filter(date >= as.Date(\"2035-08-05\") & date <= as.Date(\"2035-08-10\"))%>%\n  ungroup() %>%\n  select(date, start_time, end_time, location, vessel,company)\n\n# Remove rows where end_time is NA (last observation for each vessel)\ndata <- data %>% filter(!is.na(end_time))%>% filter(!is.na(company))\n\n# Now you have start_time and end_time calculated for each vessel\n\n# Assign numeric values to locations for plotting purposes \ndata$location_factor <- as.factor(data$location) \ndata$location_num <- as.numeric(data$location_factor)\n\n  \ncombined_data <- data %>%\n  filter(company == \"Tainamarine Fishing Co\")\n\n# Create a line plot of vessel location over time\nggplot(combined_data, aes(x = date, y = location_num, color = vessel)) +\n  geom_line() +\n  geom_point(size = 2) +  # Add points for each location\n  geom_text_repel(aes(label = location), size = 3) +  # Add labels with repelling\n  labs(title = \"Vessel Trajectories Over Time by Company\", x = \"Time\", y = \"Location\", color = \"Vessel\") +\n  theme_minimal() \n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex03_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n\nFrom the visualization below, it seems that `Tainamarine Fishing Co`'s vessel trajectories is very similar to `SouthSeafood Express Corp` vessels and is very likely the same entity which was caught fishing illegally earlier.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Group the data by company and vessel\n\n# Join node data\nmc2_nodes_geo <- combined_data %>%\n  left_join(geo_data, by = c(\"location\" = \"id\"))\n\n# Convert the resulting data frame to sf object\nmc2_nodes_geo_sf <- st_as_sf(mc2_nodes_geo)\n\n\ngrouped_data <- mc2_nodes_geo_sf %>%\n  filter(company == \"Tainamarine Fishing Co\") %>%  \n  group_by(company, vessel) %>%\n  mutate(Longitude = st_coordinates(st_centroid(geometry))[, 1],\n         Latitude = st_coordinates(st_centroid(geometry))[, 2])\n\n# Create a palette of colors\ncolors <- rainbow(length(unique(grouped_data$vessel)))\n\n# Create a ggplot with the legend for vessels\nggplot() +\n  geom_sf(data = geo_data, aes(geometry = geometry), color = \"black\", size = 0.5, fill = NA) +  # Plot borders\n  geom_path(data = grouped_data, aes(x = Longitude, y = Latitude, color = vessel, group = vessel), size = 1) +  # Plot paths with different colors for each vessel\n  geom_point(data = grouped_data, aes(x = Longitude, y = Latitude, color = vessel), size = 3) +  # Plot points\n  geom_text(data = grouped_data, aes(x = Longitude, y = Latitude, label = location), size = 3, vjust = -1) +  # Add labels\n  scale_color_manual(values = colors) +  # Assign colors to vessels\n  labs(x = \"Longitude\", y = \"Latitude\", title = \"Vessel Trajectories by Company\", color = \"Vessel\") +  # Add legend title\n  coord_sf() +  # Use coord_sf for spatial data\n  theme_minimal()  # Minimal theme\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex03_files/figure-html/unnamed-chunk-53-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Take-Home_Ex03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\r\n<link href=\"../../site_libs/vis-9.1.0/vis-network.min.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/vis-9.1.0/vis-network.min.js\"></script>\r\n<script src=\"../../site_libs/visNetwork-binding-2.1.2/visNetwork.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}