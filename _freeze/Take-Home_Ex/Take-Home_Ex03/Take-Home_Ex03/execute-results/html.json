{
  "hash": "b6a1c0d0352cca9a36892ec320bb1aa2",
  "result": {
    "markdown": "---\ntitle: \"Take Home Exercise 3: WORK IN PROGRESS\"\nauthor: \"Ten Wei Peng\"\ndate: \"May 13, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n# Overview\n\n\n# 1.Data Preparation\n\n## 1.1 Loading R Packages\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\npacman::p_load(jsonlite, igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts, sf , sp, sfdep,tmap, viridis, reshape2, stplanr, httr, lwgeom, DT, units, maps)\n```\n:::\n\n\n## 1.2. Loading the Data\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nmc2_data <- fromJSON(\"data/mc2_edited.json\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nmc2_links_prep <- as_tibble(mc2_data$links) %>%\n  distinct() %>%\n  mutate(source = as.character(source),\n         target = as.character(target),\n         type = as.character(type),\n         dwell = as.character(dwell),\n         raw_source = as.character(raw_source),\n         time = as.POSIXct(time, format = \"%Y-%m-%dT%H:%M:%OS\"),\n         date = as.Date(as.character(date), format = \"%Y-%m-%d\"),\n         ping_date = as.Date(time)) %>%\n  mutate(day_of_week = wday(time, label = TRUE))%>%\n  select(type, time, dwell, source, target, date, ping_date,raw_source, key, aphorism, holiday_greeting, wisdom, `saying of the sea`, day_of_week)\n  \n\nmc2_links_dow <- mc2_links_prep%>%\n  group_by(source, target, type,day_of_week) %>%\n  summarise(weights = n(), .groups = 'drop') %>%\n  filter(source != target) %>%\n  ungroup()\n\nmc2_links <- mc2_links_prep%>%\n  group_by(source, target, type) %>%\n  summarise(weights = n(), .groups = 'drop') %>%\n  filter(source != target) %>%\n  ungroup()\n\n# Convert nodes to tibble, modify variable types, and select required columns\nmc2_nodes <- as_tibble(mc2_data$nodes) %>%\n  mutate(\n    type_original = type,\n    id = as.character(id), \n    type = as.character(type),\n    type = case_when(\n      type %in% c(\"Entity.Vessel.CargoVessel\", \"Entity.Vessel.Ferry.Cargo\", \"Entity.Vessel.FishingVessel\", \"Entity.Vessel\", \"Entity.Vessel.Other\") ~ \"Entity.Vessel\",\n      TRUE ~ type\n    ),\n    tonnage = as.numeric(as.character(tonnage)),\n    length_overall = as.numeric(as.character(length_overall)), \n    Activities = as.character(Activities), \n    fish_species_present = as.character(fish_species_present), \n    kind = as.character(kind), \n    flag_country = as.character(flag_country),\n    company = as.character(company),\n    raw_source = as.character(raw_source),\n    namee = as.character(name), \n    last_edited_by = as.POSIXct(strptime(as.character(last_edited_by), format = \"%Y-%m-%dT%H:%M:%OS\")),\n    last_edited_date = as.POSIXct(strptime(as.character(last_edited_date), format = \"%Y-%m-%dT%H:%M:%OS\")),\n    date_added = as.POSIXct(strptime(as.character(date_added), format = \"%Y-%m-%dT%H:%M:%OS\"))\n  ) %>%\n  select(id, type,type_original, namee, company, flag_country, Activities, tonnage, length_overall, raw_source, fish_species_present, kind)\n```\n:::\n\n\n## 1.3. Data Cleaning\n\n::: panel-tabset\n### Links\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check for columns with missing values\ncolSums(is.na(mc2_links))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n source  target    type weights \n      0       0       0       0 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nsummary(mc2_links_prep)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     type                time                           dwell          \n Length:271643      Min.   :2035-02-01 00:00:00.00   Length:271643     \n Class :character   1st Qu.:2035-04-17 13:33:02.35   Class :character  \n Mode  :character   Median :2035-06-28 19:34:55.25   Mode  :character  \n                    Mean   :2035-06-30 22:13:03.65                     \n                    3rd Qu.:2035-09-13 13:44:34.00                     \n                    Max.   :2035-11-30 00:00:00.00                     \n                    NA's   :13101                                      \n    source             target               date           \n Length:271643      Length:271643      Min.   :2035-02-01  \n Class :character   Class :character   1st Qu.:2035-07-25  \n Mode  :character   Mode  :character   Median :2035-09-19  \n                                       Mean   :2035-08-29  \n                                       3rd Qu.:2035-10-26  \n                                       Max.   :2035-11-30  \n                                       NA's   :258542      \n   ping_date           raw_source             key           aphorism        \n Min.   :2035-01-31   Length:271643      Min.   :   0.0   Length:271643     \n 1st Qu.:2035-04-17   Class :character   1st Qu.:  39.0   Class :character  \n Median :2035-06-28   Mode  :character   Median : 118.0   Mode  :character  \n Mean   :2035-06-30                      Mean   : 208.2                     \n 3rd Qu.:2035-09-13                      3rd Qu.: 290.0                     \n Max.   :2035-11-29                      Max.   :1516.0                     \n NA's   :13101                                                              \n holiday_greeting      wisdom          saying of the sea   day_of_week   \n Length:271643      Length:271643      Length:271643      Tue    :46938  \n Class :character   Class :character   Class :character   Thu    :43657  \n Mode  :character   Mode  :character   Mode  :character   Wed    :43049  \n                                                          Fri    :40717  \n                                                          Mon    :39019  \n                                                          (Other):45162  \n                                                          NA's   :13101  \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nmc2_links[duplicated(mc2_links),]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 0 × 4\n# ℹ 4 variables: source <chr>, target <chr>, type <chr>, weights <int>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nglimpse(mc2_links)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 14,846\nColumns: 4\n$ source  <chr> \"City of Haacklee\", \"City of Haacklee\", \"City of Haacklee\", \"C…\n$ target  <chr> \"albacoreangler47d\", \"anchovyassaulterb1c\", \"aquaticpursuitf31…\n$ type    <chr> \"Event.TransportEvent.TransponderPing\", \"Event.TransportEvent.…\n$ weights <int> 110, 82, 1, 2, 7, 113, 34, 2, 19, 1, 20, 1, 1, 5, 2, 2, 2, 2, …\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nunique_type <- unique(mc2_links$type)\nprint(unique_type)\n```\n:::\n\n\n**Define a function to count and print unique categories for a given column.**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ncount_unique_categories <- function(data, column_name) {\n  cat(\"**\", column_name, \"**\\n\", sep = \"\")\n  category_counts <- table(data[[column_name]])\n  sorted_counts <- sort(category_counts, decreasing = TRUE)\n  print(sorted_counts)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ncount_unique_categories(mc2_links, 'type') \n```\n:::\n\n\n\n### Nodes\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nglimpse(mc2_nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 5,637\nColumns: 12\n$ id                   <chr> \"gadusnspecificatae4ba\", \"piscesfrigus900\", \"pisc…\n$ type                 <chr> \"Entity.Commodity.Fish\", \"Entity.Commodity.Fish\",…\n$ type_original        <chr> \"Entity.Commodity.Fish\", \"Entity.Commodity.Fish\",…\n$ namee                <chr> \"Cod/Gadus n.specificatae\", \"Birdseye/Pisces frig…\n$ company              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ flag_country         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Activities           <chr> \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"…\n$ tonnage              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ length_overall       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ raw_source           <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Oceanus:…\n$ fish_species_present <chr> \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"…\n$ kind                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"city\", \"…\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Check for columns with missing values\ncolSums(is.na(mc2_nodes))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  id                 type        type_original \n                   0                    0                    0 \n               namee              company         flag_country \n                5627                 5458                 5341 \n          Activities              tonnage       length_overall \n                   0                 5359                 5354 \n          raw_source fish_species_present                 kind \n                   0                    0                 5613 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nmc2_nodes[duplicated(mc2_nodes),]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 0 × 12\n# ℹ 12 variables: id <chr>, type <chr>, type_original <chr>, namee <chr>,\n#   company <chr>, flag_country <chr>, Activities <chr>, tonnage <dbl>,\n#   length_overall <dbl>, raw_source <chr>, fish_species_present <chr>,\n#   kind <chr>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nunique_type <- unique(mc2_nodes$type)\nprint(unique_type)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ncount_unique_categories(mc2_nodes, 'type') \ncount_unique_categories(mc2_nodes, 'flag_country') \ncount_unique_categories(mc2_nodes, 'company') \ncount_unique_categories(mc2_nodes, 'kind') \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncount_unique_companies <- length(unique(mc2_nodes$company))\ncount_unique_companies\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n```\n:::\n:::\n\n\n\n### Geographical Information\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Read the GeoJSON file\ngeojson_file <- \"data/Oceanus Information/Oceanus Geography.geojson\"\ngeo_data <- st_read(geojson_file) %>%\n  st_transform(crs = 3571)%>%\n  rename(id = Name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `Oceanus Geography' from data source \n  `C:\\weipengten\\ISSS608\\ISSS608-VAA\\Take-Home_Ex\\Take-Home_Ex03\\data\\Oceanus Information\\Oceanus Geography.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 29 features and 7 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -167.0654 ymin: 38.07452 xmax: -163.2723 ymax: 40.67775\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Visualize the geographical data with tmap\ntmap_mode(\"plot\")\n\ntm_shape(geo_data) +\n  tm_polygons(alpha = 0.5) +\n  tm_borders(lwd = 1, alpha = 0.5) +\n  tm_layout(frame = FALSE) +\n  tmap_style(\"gray\") +\n  tm_shape(geo_data) +\n  tm_dots(col = \"purple\", size = 0.2) +\n  tm_text(text = \"id\", size = 0.6, col = \"black\") +  # Add labels to the locations\n  tm_layout(legend.position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex03_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n:::\n\n\n## Task 2 (part 1) : EDA\n\n\n::: panel-tabset\n### Filter and Prepare Data\n\n#### Extracting Commodity Fish Data\nLet's derive a function to retrieve the unique fish species found in specific regions.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ncommodityfish <- mc2_nodes %>%\n  filter(type == \"Entity.Commodity.Fish\")\n\n# Extract and transform Fish Species data\nfishspecies_expanded <- mc2_nodes %>%\n  filter(type == \"Entity.Location.Region\") %>%\n  mutate(Fish_Species = str_remove_all(fish_species_present, 'c\\\\(|\\\\)|\"')) %>%\n  mutate(Fish_Species = str_split(Fish_Species, \",\\\\s*\")) %>%\n  unnest(Fish_Species) %>%\n  mutate(Fish_Species = str_trim(Fish_Species)) %>%\n  rename(Region = id)\n\n# Join with Commodity Fish data\nfishspecies_expanded <- fishspecies_expanded %>%\n  left_join(commodityfish, by = c(\"Fish_Species\" = \"namee\")) %>%\n  select(Region, Fish_Species, id)\n\n# Function to get commodity fish IDs for specific regions\nget_commodity_fish_ids <- function(..., regions = NULL) {\n  fishspecies_expanded %>%\n    filter(Region %in% c(..., regions)) %>%\n    pull(id)\n}\n```\n:::\n\n\n\n#### Preparing Harbor Report Data\nLet's derive a function to retrieve the unique fish species found in specific regions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nharboureport_culprit<- mc2_links_prep %>%\n  filter(type == \"Event.HarborReport\") %>%\n  filter(source %in% c(\"snappersnatcher7be\",\"roachrobberdb6\")) %>%\n  rename(vessel = source) %>%\n  rename(city = target) %>%\n  rename(harboreporting_date = date) %>%\n  select(city, vessel, type, harboreporting_date)\n```\n:::\n\n\n\n\n####. Processing Transaction Data\n\nRetrieve and process transaction data to identify suspicious transactions.\n\n\nLet's retrieve the `Transaction` data by applying the filter `type == \"Event.Transaction\"` for our links data\n\nWe then perform a self-join on the transaction dataset on `source` column to get the respective `city` and `fish` column for each cargo delivery, filtering for only the two cities we observed earlier 'City of Paackland', 'City of Lomark' which `snappersnatcher7b` frequented.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Retrieve and process transaction data\ntransactions <- mc2_links_prep %>%\n  filter(type == \"Event.Transaction\") %>%\n  filter(!is.na(source) & !is.na(target)) %>%\n  group_by(source) %>%\n  mutate(row_number = row_number()) %>%\n  pivot_wider(names_from = row_number, values_from = target) %>%\n  rename(city = `2`, fish = `1`) %>%\n  rename(transaction_date = date) %>%\n  select(source, fish, city, type, transaction_date) %>%\n  inner_join(commodityfish, by = c(\"fish\" = \"id\"))\n```\n:::\n\nNo duplicated transaction records were found after the self-join\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nduplicated_transactions <- transactions[duplicated(transactions$source), ]\nduplicated_transactions\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 0 × 16\n# Groups:   source [0]\n# ℹ 16 variables: source <chr>, fish <chr>, city <chr>, type.x <chr>,\n#   transaction_date <date>, type.y <chr>, type_original <chr>, namee <chr>,\n#   company <chr>, flag_country <chr>, Activities <chr>, tonnage <dbl>,\n#   length_overall <dbl>, raw_source <chr>, fish_species_present <chr>,\n#   kind <chr>\n```\n:::\n:::\n\n\n#### Filtering and Preparing Nodes and Links\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Filter and prepare nodes\nmc2_nodes_suspect <- mc2_nodes %>%\n  filter(type %in% c('Entity.Vessel', 'Entity.Location.Point', 'Entity.Location.City', 'Entity.Location.Region')) %>%\n  filter(!(type == 'Entity.Vessel' & company != \"SouthSeafood Express Corp\"))\n\n# Filter and prepare nodes\nmc2_links_filtered <- mc2_links %>%\n  filter(type %in% c('Event.TransportEvent.TransponderPing','Event.Transaction',\"Event.HarborReport\"))\n\n# Extract relevant node IDs\nfiltered_node_ids <- mc2_nodes_suspect$id\n\n# Filter and prepare edges\nmc2_links_suspect <- mc2_links_filtered %>%\n  filter(source %in% filtered_node_ids & target %in% filtered_node_ids)\n\n# Ensure no missing nodes in the filtered links\nmissing_nodes <- setdiff(unique(c(mc2_links_suspect$source, mc2_links_suspect$target)), mc2_nodes_suspect$id)\nif(length(missing_nodes) > 0) {\n  mc2_links_suspect <- mc2_links_suspect %>%\n    filter(!source %in% missing_nodes & !target %in% missing_nodes)\n}\n```\n:::\n\n### Construct the Graph\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Create the graph with filtered nodes and edges\nmc2_graph <- tbl_graph(nodes = mc2_nodes_suspect, edges = mc2_links_suspect, directed = TRUE) %>%\n  mutate(betweenness_centrality = centrality_betweenness(),\n         closeness_centrality = centrality_closeness(),\n         degree_centrality = centrality_degree())\n```\n:::\n\n\n\n### Visualisation\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Filter the graph to include only nodes with edges\nmc2_graph_with_edges <- mc2_graph %>%\n  filter(!node_is_isolated())\n\n# Visualization with filtered nodes\nmc2_graph_with_edges %>%\n  ggraph(layout = \"fr\") +\n  geom_edge_link(aes(alpha = 0.5), show.legend = FALSE) +\n  geom_node_point(aes(\n    size = degree_centrality,\n    color = type,\n    alpha = 0.3)) +\n  geom_node_text(aes(label = id), repel = TRUE, size = 3, vjust = 1.5) +  # Add labels to nodes\n  scale_size_continuous(range = c(1, 10)) +\n  scale_color_manual(values = c(\"Entity.Vessel\" = \"blue\", \n                                \"Entity.Location.Point\"= \"red\",\n                                \"Entity.Location.Region\" =\"green\",\n                                \"Entity.Location.City\" = \"lightblue\"\n                                )) +\n  labs(title = \"SouthSeafood Express Corp's Activities\",\n       color = \"Node Type\",\n       size = \"Degree Centrality\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex03_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n::: \n\n\n### Interactive VIsualisation\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Aggregate edges data\nmc2_links_suspect <- mc2_links_suspect %>%\n  left_join(mc2_nodes_suspect, by = c(\"source\" = \"id\")) %>%\n  rename(from = source) %>%\n  left_join(mc2_nodes_suspect, by = c(\"target\" = \"id\")) %>%\n  rename(to = target) %>%\n  group_by(from, to) %>%\n  summarise(weight = sum(weights)) %>%\n  filter(from != to) %>%\n  filter(weight > 1) %>%\n  ungroup()\n\nconnected_nodes <- unique(c(mc2_links_suspect$from, mc2_links_suspect$to))\n\n# Filter out isolated nodes\nmc2_nodes_suspect <- mc2_nodes_suspect %>%\n  filter(id %in% connected_nodes) %>%\n  rename(group = type) %>%\n  mutate(label = ifelse(group %in% c('Entity.Vessel', 'Entity.Location.Point', 'Entity.Location.City',\"Entity.Location.Region\"), id, NA)) %>%\n  group_by(company) %>%\n  mutate(id1 = if_else(group == \"Entity.Vessel\" & company != \"\" & !is.na(company),\n                       paste0(company, row_number()),\n                       if_else(group == \"Entity.Vessel\" & (company == \"\" | is.na(company)), id, NA_character_)),\n         id1 = if_else(group != \"Entity.Vessel\", id, id1)) %>%\n  ungroup()\n\n\n### Visualize the Graph\n\n# Visualize the resulting graph\nvisNetwork(mc2_nodes_suspect, mc2_links_suspect) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123) %>%\n  visOptions(highlightNearest = list(enabled = TRUE, degree = 1),\n             nodesIdSelection = TRUE,\n             selectedBy = \"type\")  # Add type dropdown\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"visNetwork html-widget html-fill-item\" id=\"htmlwidget-0a3905e0d178ad0352cc\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-0a3905e0d178ad0352cc\">{\"x\":{\"nodes\":{\"id\":[\"City of Lomark\",\"City of Himark\",\"City of Paackland\",\"snappersnatcher7be\",\"roachrobberdb6\",\"Nav A\",\"Nav C\",\"Nav 2\",\"Nav 1\",\"Exit East\",\"Nav E\",\"Cod Table\",\"Ghoti Preserve\",\"Wrasse Beds\"],\"group\":[\"Entity.Location.City\",\"Entity.Location.City\",\"Entity.Location.City\",\"Entity.Vessel\",\"Entity.Vessel\",\"Entity.Location.Point\",\"Entity.Location.Point\",\"Entity.Location.Point\",\"Entity.Location.Point\",\"Entity.Location.Point\",\"Entity.Location.Point\",\"Entity.Location.Region\",\"Entity.Location.Region\",\"Entity.Location.Region\"],\"type_original\":[\"Entity.Location.City\",\"Entity.Location.City\",\"Entity.Location.City\",\"Entity.Vessel.FishingVessel\",\"Entity.Vessel.FishingVessel\",\"Entity.Location.Point\",\"Entity.Location.Point\",\"Entity.Location.Point\",\"Entity.Location.Point\",\"Entity.Location.Point\",\"Entity.Location.Point\",\"Entity.Location.Region\",\"Entity.Location.Region\",\"Entity.Location.Region\"],\"namee\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"company\":[null,null,null,\"SouthSeafood Express Corp\",\"SouthSeafood Express Corp\",null,null,null,null,null,null,null,null,null],\"flag_country\":[null,null,null,\"Oceanus\",\"Oceanus\",null,null,null,null,null,null,null,null,null],\"Activities\":[\"c(\\\"Deep sea fishing\\\", \\\"Commercial fishing\\\", \\\"Tourism\\\", \\\"Shipping\\\")\",\"Recreation, tourism\",\"c(\\\"Industry\\\", \\\"Fishing industry\\\", \\\"Local shipping\\\", \\\"Tourism\\\", \\\"Research\\\", \\\"Sport fishing\\\")\",\"NULL\",\"NULL\",\"Navigation\",\"Navigation\",\"Navigation\",\"Navigation\",\"c(\\\"International shipping\\\", \\\"Deep sea fishing\\\")\",\"Navigation\",\"Commercial fishing\",\"c(\\\"Research\\\", \\\"Tourism\\\", \\\"Recreation\\\")\",\"Commercial fishing\"],\"tonnage\":[null,null,null,100,11700,null,null,null,null,null,null,null,null,null],\"length_overall\":[null,null,null,20,130,null,null,null,null,null,null,null,null,null],\"raw_source\":[\"Oceanus: Geography Notes\",\"Oceanus: Geography Notes\",\"Oceanus: Geography Notes\",\"Oceanus Vessel Locator System\",\"Oceanus Vessel Locator System\",\"Oceanus: Geography Notes\",\"Oceanus: Geography Notes\",\"Oceanus: Geography Notes\",\"Oceanus: Geography Notes\",\"Oceanus: Geography Notes\",\"Oceanus: Geography Notes\",\"Oceanus: Geography Notes\",\"Oceanus: Geography Notes\",\"Oceanus: Geography Notes\"],\"fish_species_present\":[\"NULL\",\"NULL\",\"NULL\",\"NULL\",\"NULL\",\"NULL\",\"NULL\",\"NULL\",\"NULL\",\"NULL\",\"NULL\",\"c(\\\"Cod/Gadus n.specificatae\\\", \\\"Birdseye/Pisces frigus\\\", \\\"Beauvoir/Habeas pisces\\\")\",\"c(\\\"Wrasse/Labridae n.refert\\\", \\\"Beauvoir/Habeas pisces\\\", \\\"Helenaa/Pisces satis\\\", \\\"Offidiaa/Piscis osseus\\\")\",\"c(\\\"Wrasse/Labridae n.refert\\\", \\\"Birdseye/Pisces frigus\\\", \\\"Beauvoir/Habeas pisces\\\")\"],\"kind\":[\"city\",\"city\",\"city\",null,null,\"buoy\",\"buoy\",\"buoy\",\"buoy\",\"buoy\",\"buoy\",\"Fishing Ground\",\"Ecological Preserve\",\"Fishing Ground\"],\"label\":[\"City of Lomark\",\"City of Himark\",\"City of Paackland\",\"snappersnatcher7be\",\"roachrobberdb6\",\"Nav A\",\"Nav C\",\"Nav 2\",\"Nav 1\",\"Exit East\",\"Nav E\",\"Cod Table\",\"Ghoti Preserve\",\"Wrasse Beds\"],\"id1\":[\"City of Lomark\",\"City of Himark\",\"City of Paackland\",\"SouthSeafood Express Corp1\",\"SouthSeafood Express Corp2\",\"Nav A\",\"Nav C\",\"Nav 2\",\"Nav 1\",\"Exit East\",\"Nav E\",\"Cod Table\",\"Ghoti Preserve\",\"Wrasse Beds\"],\"x\":[0.02472680499375746,-0.5107254070934122,0.9211885233077695,0.3932084480026541,-0.4048203441194833,-0.9023657350599308,-0.2524578362830735,0.2570947394754681,0.1437605521698384,1,-1,0.6343139290354729,0.8450153564580829,-0.08617407848294112],\"y\":[-0.2096340086843149,-1,0.6400742696047741,0.2152239133014862,-0.4606555810686466,-0.9670111983682836,0.2493424299186109,1,-0.5335512163360047,0.1574515772886143,-0.3550741748608149,0.9485764546430839,-0.3130753692051936,0.05841525061956188]},\"edges\":{\"from\":[\"City of Himark\",\"City of Lomark\",\"City of Lomark\",\"Cod Table\",\"Exit East\",\"Ghoti Preserve\",\"Nav 1\",\"Nav 1\",\"Nav 2\",\"Nav A\",\"Nav C\",\"Nav C\",\"Nav E\",\"Wrasse Beds\",\"Wrasse Beds\",\"roachrobberdb6\",\"roachrobberdb6\",\"snappersnatcher7be\",\"snappersnatcher7be\"],\"to\":[\"roachrobberdb6\",\"roachrobberdb6\",\"snappersnatcher7be\",\"snappersnatcher7be\",\"snappersnatcher7be\",\"snappersnatcher7be\",\"roachrobberdb6\",\"snappersnatcher7be\",\"snappersnatcher7be\",\"roachrobberdb6\",\"roachrobberdb6\",\"snappersnatcher7be\",\"roachrobberdb6\",\"roachrobberdb6\",\"snappersnatcher7be\",\"City of Himark\",\"City of Lomark\",\"City of Lomark\",\"City of Paackland\"],\"weight\":[23,6,20,102,44,4,2,37,42,4,229,31,14,222,9,2,7,2,4]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":false},\"physics\":{\"stabilization\":false},\"layout\":{\"randomSeed\":123}},\"groups\":[\"Entity.Location.City\",\"Entity.Vessel\",\"Entity.Location.Point\",\"Entity.Location.Region\"],\"width\":null,\"height\":null,\"idselection\":{\"enabled\":true,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false,\"variable\":\"type\",\"main\":\"Select by type\"},\"main\":null,\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"igraphlayout\":{\"type\":\"square\"},\"legend\":{\"width\":0.2,\"useGroups\":true,\"position\":\"left\",\"ncol\":1,\"stepX\":100,\"stepY\":100,\"zoom\":true},\"highlight\":{\"enabled\":true,\"hoverNearest\":false,\"degree\":1,\"algorithm\":\"all\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":false,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n## Task 2 (part 2) : Deep Investigations into \"snappersnatcher7b\"\n\n\n::: panel-tabset\n\n\n### 1. Fish Species in Ghoti Preserve\nFrom the EDA/ visualisation earlier, it seems `\"snappersnatcher7be\"` frequents:\n\n- Locations: `\"Nav1\"`, `\"Nav2\"` which is extremely near `\"Ghoti Preserve\"`\n\n- Region: `\"Wrasse Beds\"` , `\"Ghoti Preserve\"`, `\"Cod Table\"`\n\n- City: `City of Paackland` and `City of Lomark`\n\n\nHence, let's dentify the fish species commonly found in the \"Ghoti Preserve\" region.\n\nIn `\"Ghoti Preserve\"`, these are the fish species that commonly found. The names are as below:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Retrieve unique fish species in Ghoti Preserve\nunique_fish_species_ghoti <- fishspecies_expanded %>%\n  filter(Region == \"Ghoti Preserve\") %>%\n  pull(Fish_Species) %>%\n  unique()\n\n# Print the unique Fish_Species\nprint(unique_fish_species_ghoti)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Wrasse/Labridae n.refert\" \"Beauvoir/Habeas pisces\"  \n[3] \"Helenaa/Pisces satis\"     \"Offidiaa/Piscis osseus\"  \n```\n:::\n:::\n\n\n\n### 2. Suspicious Transactions\n\nMerge the transactions with HarborReport data to identify relevant suspicious transactions.\n\n\nNext, we proceed with the HarborReport data by applying filter type == `Event.HarborReport` to our links dataset and retrieve only`snappersnatcher7b`'s records then merge with transactions dataset to filter out relevant suspicious transactions given the fact that the harbor reports are likely to be a few days after the transaction.\n\nNote that, this is a rough merge on city, hence we are just narrowing down and end up with likely pairs of transactions with snappersnatcher7be's harbor reporting to guess its cargo\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Retrieve HarborReport data for \"snappersnatcher7be\"\nharboureport_culprit<- mc2_links_prep %>%\n  filter(type == \"Event.HarborReport\") %>%\n  filter(source ==\"snappersnatcher7be\") %>%\n  rename(vessel = source) %>%\n  rename(city = target) %>%\n  rename(harboreporting_date = date) %>%\n  select(city, vessel, type, harboreporting_date)\n\n\n# Merge with transactions and apply filter condition\nmerged_data <- merge(transactions, harboureport_culprit, by = \"city\", all.x = TRUE)\n\n\nfiltered_transactions <- merged_data %>%\n  filter(harboreporting_date >= transaction_date + 1 &  # Change the number based on your lag\n         harboreporting_date <= transaction_date + 3) %>%\n  select(namee, fish, city,harboreporting_date,transaction_date, vessel)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter out entries where namee is not \"Cod/Gadus n.specificatae\"\nfiltered_transactions <- filtered_transactions %>%\n  filter(namee != \"Cod/Gadus n.specificatae\")\n\n\njoined_data <- merge(filtered_transactions, fishspecies_expanded, by.x = \"namee\", by.y = \"Fish_Species\", all.x = TRUE)\nunique_regions <- unique(joined_data$Region)\nunique_regions\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Ghoti Preserve\" \"Nemo Reef\"      \"Wrasse Beds\"   \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Create the timeline plot\nggplot(filtered_transactions)  +\n  geom_segment(aes(x = transaction_date, xend = harboreporting_date, y = namee, yend = namee, color = vessel), size = 1.5) +\n  geom_point(aes(x = transaction_date, y = namee, color = vessel, shape = city), size = 3) +\n  labs(title = \"Suspicious Transactions and Harbor Reports for roachrobberdb6\", x = \"Date\", y = \"Cargo Type\") +\n  theme_minimal() +\n  scale_color_discrete(name = \"Vessel\") +\n  scale_shape_discrete(name = \"City\") +  # Add legend for city\n  theme(\n    plot.title = element_text(hjust = 0, face = \"bold\"),  # Align the title to the left\n    plot.title.position = \"plot\"                          # Ensure title alignment is based on the entire plot area\n  )\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex03_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n\n### 3. Suspicious Findings\n\nFrom our observations, \"snappersnatcher7be\" is likely carrying the following cargo:\n\n- \"Cod/Gadus n.specificatae\" around 20th March and\n\n- \"Wrasse/Labridae n.refert\" around 8th May\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nprint(unique(filtered_transactions$namee))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Wrasse/Labridae n.refert\"\n```\n:::\n:::\n\n\nAdditionally, we found its transportation activities suspicious due to its frequent visits to \"Ghoti Preserve\":\n\n- `\"Nav 1\"`: 17 occurences\n- `\"Nav 2\"`: 7 occurences\n\nFor legitimate occurrences related to \"Wrasse/Labridae n.refert\", there's fewer:\n\n- `\"Nav C\"`: 10 occurences\n- `\"Wrasse Beds\"`: 3 occurences\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Retrieve TransponderPing data for \"snappersnatcher7be\"\ntransponder_culprit <- mc2_links_prep %>%\n  filter(type == \"Event.TransportEvent.TransponderPing\",\n         target == \"snappersnatcher7be\",\n         time <= \"2035-05-09\",\n         time >= \"2035-04-09\")\n\n# Count unique categories in the 'source' column\ncount_unique_categories(transponder_culprit, 'source') \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n**source**\n\n        Cod Table         Exit East             Nav 2             Nav C \n               38                18                17                10 \n            Nav 1    City of Lomark       Wrasse Beds City of Paackland \n                7                 5                 3                 1 \n```\n:::\n:::\n\n\n\nBar Plot for Suspicious and Legitimate Transportation Activities\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Data for transportation activities\nlocation_counts <- transponder_culprit %>%\n  filter(!source %in% c('Cod Table', 'Exit East',\"City of Paackland\", \"City of Lomark\")) %>% \n  group_by(source) %>%\n  summarise(Occurrences = n()) %>%\n  ungroup() %>%\n  rename(Location = source) %>%\n  mutate(Type = case_when(\n    Location %in% c(\"Nav 1\", \"Nav 2\") ~ \"Suspicious\",\n    TRUE ~ \"Legitimate\"\n  ))\n\n# Reorder Location factor levels so \"Suspicious\" locations appear at the top\nlocation_counts <- location_counts %>%\n  mutate(Location = factor(Location, levels = unique(Location[order(Type, decreasing = TRUE)])))\n\n# Bar plot for transportation activities\nggplot(location_counts, aes(x = Occurrences, y = Location, fill = Type)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Transportation Activities of snappersnatcher7be\", x = \"Number of Occurrences\", y = \"Location\") +\n  scale_fill_manual(values = c(\"Suspicious\" = \"red\", \"Legitimate\" = \"blue\")) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0, face = \"bold\"),  # Align the title to the left\n    plot.title.position = \"plot\"                          # Ensure title alignment is based on the entire plot area\n  )\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex03_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n\n3. Geographical Plot \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nlocation_counts <- transponder_culprit %>%\n  filter(source %in% c('Cod Table', 'Exit East',\"City of Paackland\", \"City of Lomark\",\"Nav 1\", \"Nav 2\", \"Ghoti Preserve\", \"Exit East\", \"Nav C\", \"Wrasse Beds\", \"Don Limpet Preserve\")) %>% \n  group_by(source) %>%\n  summarise(Occurrences = n()) %>%\n  ungroup() %>%\n  rename(Location = source) %>%\n  mutate(Marked = case_when(\n    Location %in% c(\"Nav 1\", \"Nav 2\") ~ \"Suspicious\",   TRUE ~ \"Legitimate\"\n  )) %>%\n  mutate(Location = factor(Location, levels = unique(Location[order(Marked, decreasing = TRUE)])))  # Reorder Location factor levels\n\n# Merge location counts with geo data\ngeo_data_0 <- left_join(geo_data, location_counts, by = c(\"id\" = \"Location\"))\n\n# Extract coordinates from geometry data\ncoords_0 <- st_coordinates(st_centroid(geo_data_0))\n\n# Add coordinates to the geo_data\ngeo_data_0$Longitude <- coords_0[,1]\ngeo_data_0$Latitude <- coords_0[,2]\n\n\n# Filter for specific IDs to label\nlabel_ids_0 <- c('Cod Table', 'Exit East', 'City of Paackland', 'City of Lomark', 'Nav 1', 'Nav 2', 'Ghoti Preserve', 'Exit East', 'Nav C', 'Wrasse Beds', 'Don Limpet Preserve')\ngeo_data_labels_0 <- geo_data_0 %>%\n  filter(id %in% label_ids_0)\n\n# Set plot size (for RStudio or other environments that support resizing)\noptions(repr.plot.width = 10, repr.plot.height = 8)\n\n# Geographical plot with labels\nggplot() +\n  geom_sf(data = geo_data_labels_0, aes(geometry = geometry, color = Marked)) +\n  geom_text(data = geo_data_labels_0 , aes(x = Longitude, y = Latitude, label = id), size = 2, color = \"black\", fontface = \"bold\") +\n  scale_color_manual(values = c(\"Suspicious\" = \"red\", \"Legitimate\" = \"blue\")) +\n  labs(title = \"Geographical Plot of snappersnatcher7be Activities\") +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 16),  # Enlarge title\n        legend.title = element_text(size = 12),  # Enlarge legend title\n        legend.text = element_text(size = 10),  # Enlarge legend text\n        axis.text = element_text(size = 10),  # Enlarge axis text\n        axis.title = element_text(size = 12))  # Enlarge axis title\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex03_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n:::\n\n\n\n\n## Task 2 (part 3) : Deep Investigations into \"roachrobberdb6\"\n\n::: panel-tabset\n\n### 1. Suspicious Transactions\n\nMerge the transactions with HarborReport data to identify relevant suspicious transactions.\n\n\nNext, we proceed with the HarborReport data by applying filter type == `Event.HarborReport` to our links dataset and retrieve only`snappersnatcher7b`'s records then merge with transactions dataset to filter out relevant suspicious transactions given the fact that the harbor reports are likely to be a few days after the transaction.\n\nNote that, this is a rough merge on city, hence we are just narrowing down and end up with likely pairs of transactions with snappersnatcher7be's harbor reporting to guess its cargo\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Retrieve HarborReport data for \"roachrobberdb6\"\nharboureport_culprit1<- mc2_links_prep %>%\n  filter(type == \"Event.HarborReport\") %>%\n  filter(source ==\"roachrobberdb6\") %>%\n  rename(vessel = source) %>%\n  rename(city = target) %>%\n  rename(harboreporting_date = date) %>%\n  select(city, vessel, type, harboreporting_date)\n\n\n# Merge with transactions and apply filter condition\nmerged_data1 <- merge(transactions, harboureport_culprit1, by = \"city\", all.x = TRUE)\n\n\nfiltered_transactions1 <- merged_data1 %>%\n  filter(harboreporting_date >= transaction_date + 1 &  # Change the number based on your lag\n         harboreporting_date <= transaction_date + 3) %>%\n  select(namee, fish, city,harboreporting_date,transaction_date, vessel)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter out entries where namee is not \"Cod/Gadus n.specificatae\"\nfiltered_transactions1 <- filtered_transactions1 %>%\n  filter(namee != \"Cod/Gadus n.specificatae\")\n\n\njoined_data <- merge(filtered_transactions1, fishspecies_expanded, by.x = \"namee\", by.y = \"Fish_Species\", all.x = TRUE)\nunique_regions <- unique(joined_data$Region)\nunique_regions\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Tuna Shelf\"     \"Ghoti Preserve\" \"Wrasse Beds\"    \"Nemo Reef\"     \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Create the timeline plot\nggplot(filtered_transactions1) +\n  geom_segment(aes(x = transaction_date, xend = harboreporting_date, y = namee, yend = namee, color = vessel), size = 1.5) +\n  geom_point(aes(x = transaction_date, y = namee, color = vessel, shape = city), size = 3) +\n  labs(title = \"Suspicious Transactions and Harbor Reports for roachrobberdb6\", x = \"Date\", y = \"Cargo Type\") +\n  theme_minimal() +\n  scale_color_discrete(name = \"Vessel\") +\n  scale_shape_discrete(name = \"City\") +  # Add legend for city\n  theme(\n    plot.title = element_text(hjust = 0, face = \"bold\"),  # Align the title to the left\n    plot.title.position = \"plot\"                          # Ensure title alignment is based on the entire plot area\n  )\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex03_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n\n### 2. No Suspicious Findings\n\nFrom our observations, \"roachrobberdb6\" is likely carrying the following cargo:\n\n- \"Wrasse/Labridae n.refert\" around February and April\n\n- \"Harland/Piscis sapidum\" in April\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nprint(unique(filtered_transactions1$namee))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Wrasse/Labridae n.refert\" \"Harland/Piscis sapidum\"  \n```\n:::\n:::\n\n\n\nWe did not manage to find its fishing activities suspicious between the period however for the date range. It is likely not to be suspicious.\n\n- `\"Nav C\"`: 38 occurences\n- `\"Wrasse Beds\"`: 42 occurences\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Retrieve TransponderPing data for \"roachrobberdb6\"\ntransponder_culprit1 <- mc2_links_prep %>%\n  filter(type == \"Event.TransportEvent.TransponderPing\",\n         target == \"roachrobberdb6\",\n         time <= \"2035-04-05\",\n         time >= \"2035-03-20\")\n\n# Count unique categories in the 'source' column\ncount_unique_categories(transponder_culprit1, 'source') \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n**source**\n\n   Wrasse Beds          Nav C City of Himark City of Lomark \n            42             38              2              2 \n```\n:::\n:::\n\n\n\n#### Bar Plot for Suspicious and Legitimate Transportation Activities\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Data for transportation activities\nlocation_counts1 <- transponder_culprit1 %>%\n  filter(!source %in% c('Cod Table', 'Exit East',\"City of Paackland\", \"City of Lomark\",\"City of Himark\")) %>% \n  group_by(source) %>%\n  summarise(Occurrences = n()) %>%\n  ungroup() %>%\n  rename(Location = source) %>%\n  mutate(Type = case_when(\n    Location %in% c(\"Nav 1\", \"Nav 2\") ~ \"Suspicious\",\n    TRUE ~ \"Legitimate\"\n  ))\n\n# Reorder Location factor levels so \"Suspicious\" locations appear at the top\nlocation_counts1 <- location_counts1 %>%\n  mutate(Location = factor(Location, levels = unique(Location[order(Type, decreasing = TRUE)])))\n\n# Bar plot for transportation activities\nggplot(location_counts1, aes(x = Occurrences, y = Location, fill = Type)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Transportation Activities of roachrobberdb6\", x = \"Number of Occurrences\", y = \"Location\") +\n  scale_fill_manual(values = c(\"Suspicious\" = \"red\", \"Legitimate\" = \"blue\")) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0, face = \"bold\"),  # Align the title to the left\n    plot.title.position = \"plot\"                          # Ensure title alignment is based on the entire plot area\n  )\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex03_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\n\n#### Geographical Visualisation\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Create location_counts1 with the Marked column\nlocation_counts1 <- transponder_culprit1 %>%\n  filter(source %in% c('Cod Table', 'Exit East',\"City of Paackland\", \"City of Lomark\",\"Nav 1\", \"Nav 2\", \"Ghoti Preserve\", \"Exit East\", \"Nav C\", \"Wrasse Beds\", \"Don Limpet Preserve\",\"Nemo Preserve\",\"Tuna Shelf\")) %>% \n  group_by(source) %>%\n  summarise(Occurrences = n()) %>%\n  ungroup() %>%\n  rename(Location = source) %>%\n  mutate(Marked = case_when(\n    Location %in% c(\"Nav 1\", \"Nav 2\") ~ \"Suspicious\",   \n    TRUE ~ \"Legitimate\"\n  )) %>%\n  mutate(Location = factor(Location, levels = unique(Location[order(Marked, decreasing = TRUE)])))  # Reorder Location factor levels\n\n# Merge location counts with geo_data to include the Marked column\ngeo_data_1 <- left_join(geo_data, location_counts1, by = c(\"id\" = \"Location\"))\n\n# Extract coordinates from geometry data\ncoords_1 <- st_coordinates(st_centroid(geo_data_1))\n# Warning: st_centroid assumes attributes are constant over geometries\n\n# Add coordinates to the geo_data\ngeo_data_1$Longitude <- coords_1[,1]\ngeo_data_1$Latitude <- coords_1[,2]\n\n# Filter for specific IDs to label\nlabel_ids <- c('Cod Table', 'Exit East', 'City of Paackland', 'City of Lomark', 'Nav 1', 'Nav 2', 'Ghoti Preserve', 'Exit East', 'Nav C', \"Wrasse Beds\", \"Don Limpet Preserve\",\"Nemo Preserve\",\"Tuna Shelf\")\ngeo_data_labels_1 <- geo_data_1 %>%\n  filter(id %in% label_ids)\n\n# Set plot size (for RStudio or other environments that support resizing)\noptions(repr.plot.width = 10, repr.plot.height = 8)\n\n# Geographical plot with labels\nggplot() +\n  geom_sf(data = geo_data_labels_1, aes(geometry = geometry, color = geo_data_labels_1$Marked)) +\n  geom_text(data = geo_data_labels_1 , aes(x = Longitude, y = Latitude, label = id), size = 2, color = \"black\", fontface = \"bold\") +\n  scale_color_manual(values = c(\"Suspicious\" = \"red\", \"Legitimate\" = \"blue\")) +\n  labs(title = \"Geographical Plot of roachrobberdb6 Activities\") +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 16),  # Enlarge title\n        legend.title = element_text(size = 12),  # Enlarge legend title\n        legend.text = element_text(size = 10),  # Enlarge legend text\n        axis.text = element_text(size = 10),  # Enlarge axis text\n        axis.title = element_text(size = 12))  # Enlarge axis title\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex03_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n\n\n\n## Task 2 (part 4) : Transshipment Analysis\n\n\n\n### 1. Extract  Movement Data\nFirst, we extract vessel movement data from the mc2_links_prep dataset. Specifically, we are filtering the data to retain only the transponder ping events, which represent instances of vessel movement. Each ping event is associated with a location, vessel ID, and timestamp.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Extract transponder ping data for vessel movements\ntransponder_pings <- mc2_links_prep %>%\n  filter(type == \"Event.TransportEvent.TransponderPing\") %>%\n  rename(location = source, vessel = target, ping_date = ping_date) %>%\n  mutate(ping_id = row_number())  # Add a unique identifier for each row\n```\n:::\n\n\n\n### 2. Identify Vessel Pairs at the Same Location and Time\n\nNext, we're identifying pairs of vessels that are at the same location at the same time. This is achieved through a self-join operation on the transponder ping data. After ensuring that the same vessel is not paired with itself, we select distinct pairs to avoid duplicates.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Perform a self-join to find pairs of vessels at the same location and time\nvessel_pairs <- transponder_pings %>%\n  inner_join(transponder_pings, by = c(\"location\", \"ping_date\")) %>%\n  filter(ping_id.x < ping_id.y) %>%  # Ensure we do not pair the same id \n  filter(vessel.x != vessel.y) %>%  # Ensure we do not pair the same vessel\n  \n  select(\n    vessel1 = vessel.x,\n    vessel2 = vessel.y,\n    location,\n    ping_date\n  )\n```\n:::\n\n\n\n### 3. Aggregate and Analyze Transshipments\n\nIn this section, we aggregate and analyze the transshipment data. We aggregate the count of vessel pairs by date. Then, we join the vessel pairs with company information to identify the companies involved in transshipments. Finally, we group the transshipment data by company pairs and date to analyze the frequency of transshipments.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Aggregate the count of vessel pairs by date\ntransshipments_count <- vessel_pairs %>%\n  mutate(date = as.Date(ping_date)) %>%\n  group_by(date) %>%\n  summarise(transshipments = n())\n\n# Join vessel_pairs with mc2_nodes to get the company information\nvessel_pairs_with_company <- vessel_pairs %>%\n  left_join(mc2_nodes %>% select(id, company), by = c(\"vessel1\" = \"id\")) %>%\n  rename(company1 = company) %>%\n  left_join(mc2_nodes %>% select(id, company), by = c(\"vessel2\" = \"id\")) %>%\n  rename(company2 = company)\n\n# Group vessel pairs by company\ntransshipments_by_company <- vessel_pairs_with_company %>%\n  filter(company1 == company2) %>%\n  mutate(date = as.Date(ping_date)) %>%  # Ensure date column is present\n  mutate(transshipment = ifelse(duplicated(cbind(company1, company2, date)) | \n                                duplicated(cbind(company2, company1, date)), 0, 1)) %>%  # Set transshipments to 0 if duplicated\n  group_by(company1, company2, date) %>%\n  summarise(transshipments = sum(transshipment)) %>%\n  ungroup()\n\n# Filter and summarise transshipments for vessel pairs belonging to the same company\nsame_company_transshipments <- transshipments_by_company %>%\n  group_by(company1, company2) %>%\n  summarise(transshipments = sum(transshipments)) %>%\n  ungroup()\n```\n:::\n\n\n### 4. Visualize Transshipment Data for Specific Company\n\nFinally, we're visualizing the transshipment data for a specific company, \"SouthSeafood Express Corp\". This plot shows the timeline of transshipments for vessel pairs belonging to this company.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Filter vessel pairs belonging to the same company \"SouthSeafood Express Corp\"\nSouthSeafood_transshipments <- transshipments_by_company %>%\n  filter(company1 == \"SouthSeafood Express Corp\" & company2 == \"SouthSeafood Express Corp\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Create a plot\nggplot(SouthSeafood_transshipments, aes(x = date, y = transshipments)) +\n  geom_line() +\n  geom_point() +\n  labs(title = \"Transshipments for Vessel Pairs of SouthSeafood Express Corp\",\n       x = \"Date\",\n       y = \"Transshipments Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex03_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n## Task 2 (part 5) : Insights from Visualisations\n\n\n::: callout-note\n**Suspicious Movement and Catch Contents of SouthSeafood Express Corp**\n\n-   **Movement Patterns**:\n\n  -   The vessel \"snappersnatcher7be\" shows frequent visits to suspicious locations such as \"Nav 1\" (17 occurrences) and \"Nav 2\" (7 occurrences), which are near \"Ghoti Preserve\".\n  \n  -   The visualization illustrates a significant number of transshipment events involving vessels associated with \"SouthSeafood Express Corp.\" These events, occurring over a period of time, indicate a pattern of coordinated activities suggestive of illicit practices.The plotted data reveals a consistent trend of transshipment occurrences over time, which deviates significantly from normal maritime operations. The frequency and pattern of these events suggest deliberate efforts to transfer goods between vessels, potentially for illegal purposes such as smuggling or avoiding regulatory oversight.\n\n-   **Catch Contents**:\n\n  -   The vessel \"snappersnatcher7be\" is suspected of carrying cargo such as \"Wrasse/Labridae n.refert\" which is found only in \"Ghoti Preserve\" , \"Wrasse Beds\" and \"Nemo Reef.\" However, our visualisation reveals that it does not venture near \"Nemo Reef\" and it spends an equal amount of time at \"Wrasse Beds\" and locations near \"Ghoti Preserve\"\n  \n:::\n\n\n::: callout-note\n**Timing and Locations of Illegal Fishing Activities for SouthSeafood Express Corp**\n\n-   **Timeframe of Illegal Activities**:\n\n  -   Around May 8th, \"snappersnatcher7be\" is likely involved in suspicious  cargo activities involving \"Wrasse/Labridae n.refert\". Hence, we suspect it conducted illegal fishing in the month previous.\n  \n\n-   **Locations of Illegal Fishing**:\n\n  -   The vessel's frequent visits to \"Nav 1\" and \"Nav 2\" suggest these locations are hotspots for illegal activities.\n\n  -   These locations are close to \"Ghoti Preserve\", a region known for fish species like \"Wrasse/Labridae n.refert\".\n  \n:::\n\n\n## Task 3 (part 1) :\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ntransshipments_by_company %>%\n  group_by(company1, company2) %>%\n  summarise(total_transshipments = sum(transshipments)) %>%\n  arrange(desc(total_transshipments)) %>%\n  top_n(10) %>%\n  ggplot(aes(x = reorder(company1, total_transshipments), y = total_transshipments)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  labs(title = \"Intra-Company Transshipment Activity\",\n       x = \"Company\",\n       y = \"Total Transshipments\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex03_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#### Last HarborReport of SouthSeafood Express Corp\"\ndate_caught <- max(harboureport_culprit$harboreporting_date)\nprint(date_caught)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2035-05-09\"\n```\n:::\n:::\n\n`\"SouthSeafood Express Corp\"`was likely caught just after `\"2035-05-09\"` as that happened to be it's last harbor report.\n\n\n\n\n\n\n\n\n\n\n",
    "supporting": [
      "Take-Home_Ex03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\r\n<link href=\"../../site_libs/vis-9.1.0/vis-network.min.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/vis-9.1.0/vis-network.min.js\"></script>\r\n<script src=\"../../site_libs/visNetwork-binding-2.1.2/visNetwork.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}