{
  "hash": "b2166e978a5a4058b9a25266b3072f7d",
  "result": {
    "markdown": "---\ntitle: \"Take Home Exercise 1 - Geospatial Analytics for Public Good\"\nauthor: \"Ten Wei Peng\"\ndate: \"April 13, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n## The Task\n\nAssuming the role of a graphical editor of a median company, you are requested to prepare minimum two and maximum three data visualisation to reveal the private residential market and sub-markets of Singapore for the 1st quarter of 2024.\n\n## The Data\n\nTo accomplish the task, transaction data of REALIS will be used. A complete set of the private residential property transaction data from 1st January 2023 to 31st March 2024 have been downloaded via SMU e-library database service.\n\n## Install R Package\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse,ggrepel, patchwork, hrbrthemes, forcats,ggdist, ggridges,\n               ggthemes,colorspace,lubridate, cowplot)\n```\n:::\n\n\n# 1. Importing Data\n\nWe will import the data as a first step before proceeding with data cleaning, data wrangling and data ex\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Get list of CSV files in the directory\nfile_list <- list.files(path = \"data\", pattern = \"*.csv\", full.names = TRUE)\n\n# Read and bind all CSV files into one data frame\ncombined_data <- file_list %>%\n  map_df(read_csv)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# View the first few rows of the combined data\nhead(combined_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 21\n  `Project Name`       `Transacted Price ($)` `Area (SQFT)` `Unit Price ($ PSF)`\n  <chr>                                 <dbl>         <dbl>                <dbl>\n1 THE REEF AT KING'S …                2317000          883.                 2625\n2 URBAN TREASURES                     1823500          883.                 2066\n3 NORTH GAIA                          1421112         1076.                 1320\n4 NORTH GAIA                          1258112         1033.                 1218\n5 PARC BOTANNIA                       1280000          872.                 1468\n6 NANYANG PARK                        5870000         3323.                 1767\n# ℹ 17 more variables: `Sale Date` <chr>, Address <chr>, `Type of Sale` <chr>,\n#   `Type of Area` <chr>, `Area (SQM)` <dbl>, `Unit Price ($ PSM)` <dbl>,\n#   `Nett Price($)` <chr>, `Property Type` <chr>, `Number of Units` <dbl>,\n#   Tenure <chr>, `Completion Date` <chr>, `Purchaser Address Indicator` <chr>,\n#   `Postal Code` <chr>, `Postal District` <chr>, `Postal Sector` <chr>,\n#   `Planning Region` <chr>, `Planning Area` <chr>\n```\n:::\n:::\n\n\n# 2. Data Wrangling (High-Level Overview)\n\n::: panel-tabset\n## 2.1. Data Preview\n\n### First look at our Data\n\n**Let's get an understanding of our column features and their datatypes and see if we need to make any changes with the use of `glimpse()`.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(combined_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 26,806\nColumns: 21\n$ `Project Name`                <chr> \"THE REEF AT KING'S DOCK\", \"URBAN TREASU…\n$ `Transacted Price ($)`        <dbl> 2317000, 1823500, 1421112, 1258112, 1280…\n$ `Area (SQFT)`                 <dbl> 882.65, 882.65, 1076.40, 1033.34, 871.88…\n$ `Unit Price ($ PSF)`          <dbl> 2625, 2066, 1320, 1218, 1468, 1767, 1095…\n$ `Sale Date`                   <chr> \"01 Jan 2023\", \"02 Jan 2023\", \"02 Jan 20…\n$ Address                       <chr> \"12 HARBOURFRONT AVENUE #05-32\", \"205 JA…\n$ `Type of Sale`                <chr> \"New Sale\", \"New Sale\", \"New Sale\", \"New…\n$ `Type of Area`                <chr> \"Strata\", \"Strata\", \"Strata\", \"Strata\", …\n$ `Area (SQM)`                  <dbl> 82.0, 82.0, 100.0, 96.0, 81.0, 308.7, 42…\n$ `Unit Price ($ PSM)`          <dbl> 28256, 22238, 14211, 13105, 15802, 19015…\n$ `Nett Price($)`               <chr> \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", …\n$ `Property Type`               <chr> \"Condominium\", \"Condominium\", \"Executive…\n$ `Number of Units`             <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ Tenure                        <chr> \"99 yrs from 12/01/2021\", \"Freehold\", \"9…\n$ `Completion Date`             <chr> \"Uncompleted\", \"Uncompleted\", \"Uncomplet…\n$ `Purchaser Address Indicator` <chr> \"HDB\", \"Private\", \"HDB\", \"HDB\", \"HDB\", \"…\n$ `Postal Code`                 <chr> \"097996\", \"419535\", \"269343\", \"269294\", …\n$ `Postal District`             <chr> \"04\", \"14\", \"27\", \"27\", \"28\", \"19\", \"10\"…\n$ `Postal Sector`               <chr> \"09\", \"41\", \"26\", \"26\", \"79\", \"54\", \"27\"…\n$ `Planning Region`             <chr> \"Central Region\", \"East Region\", \"North …\n$ `Planning Area`               <chr> \"Bukit Merah\", \"Bedok\", \"Yishun\", \"Yishu…\n```\n:::\n:::\n\n\n::: callout-note\n**Some key observations of the data using `summary()`:**\n\n-   There seem to be 6 missing data for `Area (SQM)`\n\n-   `Transacted Price ($)` has a min of 440000 and does not have 0 values.\n\n-   `Sale Date`, is in inappropriate data format.\n\n-   `Nett Price($)` looks unuseable, we might need to drop it\n\n-   `Completion Date` has missing data in the form of '-', care needs to be taken if we are to use this column\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# summary statistics\nsummary(combined_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Project Name       Transacted Price ($)  Area (SQFT)       Unit Price ($ PSF)\n Length:26806       Min.   :   440000    Min.   :   322.9   Min.   : 138      \n Class :character   1st Qu.:  1280000    1st Qu.:   721.2   1st Qu.:1384      \n Mode  :character   Median :  1660000    Median :   990.3   Median :1762      \n                    Mean   :  2143286    Mean   :  1191.6   Mean   :1852      \n                    3rd Qu.:  2320000    3rd Qu.:  1302.4   3rd Qu.:2260      \n                    Max.   :392180000    Max.   :144883.4   Max.   :5756      \n                                                                              \n  Sale Date           Address          Type of Sale       Type of Area      \n Length:26806       Length:26806       Length:26806       Length:26806      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n   Area (SQM)      Unit Price ($ PSM) Nett Price($)      Property Type     \n Min.   :   30.0   Min.   : 1484      Length:26806       Length:26806      \n 1st Qu.:   67.0   1st Qu.:14893      Class :character   Class :character  \n Median :   92.0   Median :18966      Mode  :character   Mode  :character  \n Mean   :  110.5   Mean   :19930                                           \n 3rd Qu.:  121.0   3rd Qu.:24327                                           \n Max.   :13460.0   Max.   :61962                                           \n NA's   :6                                                                 \n Number of Units     Tenure          Completion Date   \n Min.   : 1.000   Length:26806       Length:26806      \n 1st Qu.: 1.000   Class :character   Class :character  \n Median : 1.000   Mode  :character   Mode  :character  \n Mean   : 1.005                                        \n 3rd Qu.: 1.000                                        \n Max.   :60.000                                        \n                                                       \n Purchaser Address Indicator Postal Code        Postal District   \n Length:26806                Length:26806       Length:26806      \n Class :character            Class :character   Class :character  \n Mode  :character            Mode  :character   Mode  :character  \n                                                                  \n                                                                  \n                                                                  \n                                                                  \n Postal Sector      Planning Region    Planning Area     \n Length:26806       Length:26806       Length:26806      \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character  \n                                                         \n                                                         \n                                                         \n                                                         \n```\n:::\n:::\n\n\n## 2.2. Missing Data\n\n### Dealing with Missing Data\n\n**Let's get the rows that has the missing data!.**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Check for the rows with null values\nnull_check <- combined_data %>% \n                  filter(is.na(`Area (SQM)`))\nnull_check\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 21\n  `Project Name`       `Transacted Price ($)` `Area (SQFT)` `Unit Price ($ PSF)`\n  <chr>                                 <dbl>         <dbl>                <dbl>\n1 CALDECOTT HILL ESTA…               22250000        10931.                 2036\n2 CALDECOTT HILL ESTA…               22000000        11083.                 1985\n3 RAFFLES PARK                       25300000        11071.                 2285\n4 BRADDELL HEIGHTS ES…               20300000        14274.                 1422\n5 JERVOISVILLE                       21020000        11642.                 1805\n6 N.A.                               16100000        14199.                 1134\n# ℹ 17 more variables: `Sale Date` <chr>, Address <chr>, `Type of Sale` <chr>,\n#   `Type of Area` <chr>, `Area (SQM)` <dbl>, `Unit Price ($ PSM)` <dbl>,\n#   `Nett Price($)` <chr>, `Property Type` <chr>, `Number of Units` <dbl>,\n#   Tenure <chr>, `Completion Date` <chr>, `Purchaser Address Indicator` <chr>,\n#   `Postal Code` <chr>, `Postal District` <chr>, `Postal Sector` <chr>,\n#   `Planning Region` <chr>, `Planning Area` <chr>\n```\n:::\n:::\n\n\nGiven the data above, it is impossible for us to understand if there is a systemic reason for the cause of missing data, hence we shall proceed to drop these rows from analysis.The current data now is reduced to **26800** observations from the initial **26806**.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Filter out rows where `Area (SQM)` is not missing\ncombined_data <- combined_data %>% \n                  filter(!is.na(`Area (SQM)`))\n```\n:::\n\n\nWe are not planning to utilise `Completion Date`, so we will not make any changes regarding that\n\n## 2.3. Data Type\n\n### Converting Data Types\n\n**From the Data Exploration earlier, we found `'Sale Date'` to be in `chr` format, we need to change it to `date` format to analyze the data properly.**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ncombined_data <- combined_data %>%\n  mutate(`Sale Date` = as.Date(`Sale Date`, format = \"%d %b %Y\"))\n\n# View the structure of the modified data\nstr(combined_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [26,800 × 21] (S3: tbl_df/tbl/data.frame)\n $ Project Name               : chr [1:26800] \"THE REEF AT KING'S DOCK\" \"URBAN TREASURES\" \"NORTH GAIA\" \"NORTH GAIA\" ...\n $ Transacted Price ($)       : num [1:26800] 2317000 1823500 1421112 1258112 1280000 ...\n $ Area (SQFT)                : num [1:26800] 883 883 1076 1033 872 ...\n $ Unit Price ($ PSF)         : num [1:26800] 2625 2066 1320 1218 1468 ...\n $ Sale Date                  : Date[1:26800], format: \"2023-01-01\" \"2023-01-02\" ...\n $ Address                    : chr [1:26800] \"12 HARBOURFRONT AVENUE #05-32\" \"205 JALAN EUNOS #08-02\" \"29 YISHUN CLOSE #08-10\" \"45 YISHUN CLOSE #07-42\" ...\n $ Type of Sale               : chr [1:26800] \"New Sale\" \"New Sale\" \"New Sale\" \"New Sale\" ...\n $ Type of Area               : chr [1:26800] \"Strata\" \"Strata\" \"Strata\" \"Strata\" ...\n $ Area (SQM)                 : num [1:26800] 82 82 100 96 81 ...\n $ Unit Price ($ PSM)         : num [1:26800] 28256 22238 14211 13105 15802 ...\n $ Nett Price($)              : chr [1:26800] \"-\" \"-\" \"-\" \"-\" ...\n $ Property Type              : chr [1:26800] \"Condominium\" \"Condominium\" \"Executive Condominium\" \"Executive Condominium\" ...\n $ Number of Units            : num [1:26800] 1 1 1 1 1 1 1 1 1 1 ...\n $ Tenure                     : chr [1:26800] \"99 yrs from 12/01/2021\" \"Freehold\" \"99 yrs from 15/02/2021\" \"99 yrs from 15/02/2021\" ...\n $ Completion Date            : chr [1:26800] \"Uncompleted\" \"Uncompleted\" \"Uncompleted\" \"Uncompleted\" ...\n $ Purchaser Address Indicator: chr [1:26800] \"HDB\" \"Private\" \"HDB\" \"HDB\" ...\n $ Postal Code                : chr [1:26800] \"097996\" \"419535\" \"269343\" \"269294\" ...\n $ Postal District            : chr [1:26800] \"04\" \"14\" \"27\" \"27\" ...\n $ Postal Sector              : chr [1:26800] \"09\" \"41\" \"26\" \"26\" ...\n $ Planning Region            : chr [1:26800] \"Central Region\" \"East Region\" \"North Region\" \"North Region\" ...\n $ Planning Area              : chr [1:26800] \"Bukit Merah\" \"Bedok\" \"Yishun\" \"Yishun\" ...\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# View the first few rows of the modified data\nhead(combined_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 21\n  `Project Name`       `Transacted Price ($)` `Area (SQFT)` `Unit Price ($ PSF)`\n  <chr>                                 <dbl>         <dbl>                <dbl>\n1 THE REEF AT KING'S …                2317000          883.                 2625\n2 URBAN TREASURES                     1823500          883.                 2066\n3 NORTH GAIA                          1421112         1076.                 1320\n4 NORTH GAIA                          1258112         1033.                 1218\n5 PARC BOTANNIA                       1280000          872.                 1468\n6 NANYANG PARK                        5870000         3323.                 1767\n# ℹ 17 more variables: `Sale Date` <date>, Address <chr>, `Type of Sale` <chr>,\n#   `Type of Area` <chr>, `Area (SQM)` <dbl>, `Unit Price ($ PSM)` <dbl>,\n#   `Nett Price($)` <chr>, `Property Type` <chr>, `Number of Units` <dbl>,\n#   Tenure <chr>, `Completion Date` <chr>, `Purchaser Address Indicator` <chr>,\n#   `Postal Code` <chr>, `Postal District` <chr>, `Postal Sector` <chr>,\n#   `Planning Region` <chr>, `Planning Area` <chr>\n```\n:::\n:::\n\n\n## 2.4. Duplicates Check\n\n### Dealing with Duplicates\n\n**Let's check for duplicates!**\n\nPassed initial checks in code chunk below for whole duplicate rows,\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nduplicate <- combined_data %>%\n  group_by_all() %>%\n  filter(n()>1) %>%\n  ungroup()\nduplicate\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 0 × 21\n# ℹ 21 variables: Project Name <chr>, Transacted Price ($) <dbl>,\n#   Area (SQFT) <dbl>, Unit Price ($ PSF) <dbl>, Sale Date <date>,\n#   Address <chr>, Type of Sale <chr>, Type of Area <chr>, Area (SQM) <dbl>,\n#   Unit Price ($ PSM) <dbl>, Nett Price($) <chr>, Property Type <chr>,\n#   Number of Units <dbl>, Tenure <chr>, Completion Date <chr>,\n#   Purchaser Address Indicator <chr>, Postal Code <chr>,\n#   Postal District <chr>, Postal Sector <chr>, Planning Region <chr>, …\n```\n:::\n:::\n\n\n::: callout-note\nProceed to checking for duplicates in the Address column, we seemed to have found 9 duplicated observations. However, they have different `\"Sale Date\"`. As this is expected, we will ignore the case of duplicate address found here and proceed ahead.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nduplicates <- combined_data[duplicated(combined_data$Address), ]\nfiltered_data <- combined_data[combined_data$Address %in% duplicates$Address, ]\n```\n:::\n\n:::\n\n# 3. Data Exploration\n\n::: panel-tabset\n## 3.1. Categorical Data\n\n### Dealing with Categorical Data\n\n**Let's get an understanding of the number of unique categories in our categorical data.**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Filter character columns\nchar_columns <- Filter(is.character, combined_data)\n\n# Count unique categories for each character column\nunique_counts <- sapply(char_columns, function(col) length(unique(col)))\n\n# Display the unique counts\nprint(unique_counts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               Project Name                     Address \n                       2209                       26791 \n               Type of Sale                Type of Area \n                          3                           2 \n              Nett Price($)               Property Type \n                         37                           6 \n                     Tenure             Completion Date \n                        581                          80 \nPurchaser Address Indicator                 Postal Code \n                          3                        6302 \n            Postal District               Postal Sector \n                         28                          72 \n            Planning Region               Planning Area \n                          5                          41 \n```\n:::\n:::\n\n\n::: callout-note\n**Some key observations of the data using `summary()`:**\n\n-   Columns such as `Type of Sale` , `Type of Area`, `Property Type`, `Planning Region` , `Purchaser Address Indicator` has few categories and require minimal transformations.\n\n-   Columns such as `Project Name` , `Address`, `Tenure`, `Completion Date`, `Postal District`, `Postal Code`, `Planning Area` has many categories and might require grouping to be utilised effectively.\n:::\n\n**Define a function to count and print unique categories for a given column.**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ncount_unique_categories <- function(data, column_name) {\n  cat(\"**\", column_name, \"**\\n\", sep = \"\")\n  category_counts <- table(data[[column_name]])\n  sorted_counts <- sort(category_counts, decreasing = TRUE)\n  print(sorted_counts)\n}\n```\n:::\n\n\n**Call the function for each column**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ncount_unique_categories(combined_data, 'Type of Sale')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n**Type of Sale**\n\n  Resale New Sale Sub Sale \n   16611     8644     1545 \n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ncount_unique_categories(combined_data, 'Type of Area')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n**Type of Area**\n\nStrata   Land \n 25236   1564 \n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ncount_unique_categories(combined_data, 'Property Type')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n**Property Type**\n\n            Apartment           Condominium Executive Condominium \n                10772                 10643                  3534 \n        Terrace House   Semi-Detached House        Detached House \n                 1100                   524                   227 \n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ncount_unique_categories(combined_data, 'Purchaser Address Indicator')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n**Purchaser Address Indicator**\n\nPrivate     HDB     N.A \n  15348    8719    2733 \n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ncount_unique_categories(combined_data, 'Postal District')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n**Postal District**\n\n  19   15   23   10   18   21   26   27   05   09   16   14   22   03   11   20 \n2920 2762 2662 1681 1480 1449 1365 1270 1195 1003  998  940  899  875  823  696 \n  28   13   12   17   04   25   07   02   08   01   24   06 \n 568  566  548  357  338  322  303  295  277  181   18    9 \n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ncount_unique_categories(combined_data, 'Planning Region')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n**Planning Region**\n\n   Central Region North East Region       West Region       East Region \n            12196              5036              4300              3643 \n     North Region \n             1625 \n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ncount_unique_categories(combined_data, 'Planning Area')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n**Planning Area**\n\n     Bukit Timah            Bedok       Ang Mo Kio    Marine Parade \n            2343             1752             1558             1551 \n     Bukit Batok          Geylang          Hougang         Tampines \n            1314             1227             1209             1055 \n       Serangoon       Queenstown           Novena         Sengkang \n             980              945              929              836 \n       Pasir Ris    Bukit Panjang           Yishun          Kallang \n             832              828              776              681 \n       Toa Payoh         Clementi          Tanglin      Bukit Merah \n             657              647              611              610 \n   Choa Chu Kang    Downtown Core      Jurong East        Sembawang \n             594              587              531              502 \n          Bishan          Punggol     River Valley      Jurong West \n             460              453              374              368 \n          Newton        Woodlands           Outram           Rochor \n             348              320              251              209 \n Singapore River Southern Islands          Orchard           Museum \n             140              106              102               65 \n          Mandai           Tengah           Changi     Sungei Kadut \n              25               18                3                2 \n      Paya Lebar \n               1 \n```\n:::\n:::\n\n\n::: callout-note\n**Some key observations of `Purchaser Address Indicator`**\n\n-   Note that some information regarding `Purchaser Address Indicator`is not provided at all and is labelled as `N.A` and this amounts to `2733` rows of data having such a phenomena.\n\n-   Further preprocessing needs to be taken if this data is required to be utilised.\n:::\n\n## 3.2. Continuous Data\n\n### Dealing with Continuous Data\n\n**Let's get an understanding of the data range in our Continuous data.**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Filter character columns\nnumeric_columns <- Filter(is.numeric, combined_data)\n\n# Calculate the range of values for each numeric column\ncolumn_ranges <- sapply(numeric_columns, function(x) range(x, na.rm = TRUE))\n\n# Print the range for each column\nprint(column_ranges)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Transacted Price ($) Area (SQFT) Unit Price ($ PSF) Area (SQM)\n[1,]               440000      322.92                138         30\n[2,]            392180000   144883.44               5756      13460\n     Unit Price ($ PSM) Number of Units\n[1,]               1484               1\n[2,]              61962              60\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nsummary(numeric_columns)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Transacted Price ($)  Area (SQFT)       Unit Price ($ PSF)   Area (SQM)     \n Min.   :   440000    Min.   :   322.9   Min.   : 138       Min.   :   30.0  \n 1st Qu.:  1280000    1st Qu.:   721.2   1st Qu.:1384       1st Qu.:   67.0  \n Median :  1660000    Median :   990.3   Median :1762       Median :   92.0  \n Mean   :  2139028    Mean   :  1189.2   Mean   :1852       Mean   :  110.5  \n 3rd Qu.:  2320000    3rd Qu.:  1302.4   3rd Qu.:2260       3rd Qu.:  121.0  \n Max.   :392180000    Max.   :144883.4   Max.   :5756       Max.   :13460.0  \n Unit Price ($ PSM) Number of Units \n Min.   : 1484      Min.   : 1.000  \n 1st Qu.:14893      1st Qu.: 1.000  \n Median :18966      Median : 1.000  \n Mean   :19930      Mean   : 1.005  \n 3rd Qu.:24327      3rd Qu.: 1.000  \n Max.   :61962      Max.   :60.000  \n```\n:::\n:::\n\n\n::: callout-note\n**Some key observations of the observed ranges**\n\n-   It is evident from the wide range of all the numeric column features that criteria for analysis needs to be precisely set to allow for an accurate analysis\n:::\n:::\n\n# 4. Data Visualisation (1)\n\n::: panel-tabset\n## 4.1. Data Prep\n\n### Performing the necessary and additional preprocessing before visualisation\n\nWe first added some filters to the dataset required to provide an accurate analysis. This includes:\n\n-   `Number of Units` == 1 as we are only interested in individual sales\n-   `Tenure` of 99 Years as this is the most common lease type\n\nWe named the resulting dataframe after applying the filters as *resale_data*\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Define the new labels for each category\nnew_labels <- c(\"Apartment\", \"Condo\", \"Executive Condo\", \"Terrace\", \"Semi-Detached\", \"Detached\")\n\ncombined_data = combined_data %>%\n  mutate(`Property Type` = recode(`Property Type`, \n                        \"Apartment\" = \"Apartment\",\n                        \"Condominium\" = \"Condo\",\n                        \"Executive Condominium\" = \"Executive Condos\",\n                        \"Terrace House\" = \"Terrace\",\n                        \"Semi-Detached House\" = \"Semi-Detached\",\n                        \"Detached House\" = \"Detached\"))\n\n# Filter Conditions\nresale_data <- combined_data %>%\n  filter(`Number of Units` == 1)%>%\n  filter(grepl(\"99 yrs\", Tenure, ignore.case = TRUE))\n```\n:::\n\n\n## 4.2. Visualisation\n\n### The following visualization highlights the differences shared across all Property Types in terms of:\n\n-   Distribution of Unit Price (\\$ PSF) across Property Types in Chart I\n-   Distribution of Transacted Price across Property Types in Chart II\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nplot1 <- ggplot(resale_data, \n       aes(x = `Unit Price ($ PSF)`, \n           y = `Property Type`)) +\n  stat_halfeye(adjust = 0.8,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1) +\n    \n  theme_ipsum(axis_title_size = 10,\n              base_size = 10,\n              grid = \"Y\") +\n  \n  plot_annotation(title = \"Distribution of Unit Price ($ PSF) across Property Types\",\n                  subtitle = \"Higher Median Transaction Prices do not necesarily imply Higher Median Unit Price ($ PSF) \",\n                  theme = theme(plot.title = element_text(hjust = 0),\n                                plot.background = element_rect(fill = \"#f5f5f5\", colour = \"#f5f5f5\"),\n                                panel.border = element_blank())) +\n  \n  # Adjust plot size\n  labs(x = \"Unit Price ($ PSF)\", y= NULL) +\n  theme(plot.margin = margin(10, 30, 25, 10),  # Adjust plot margins\n        plot.title = element_text(size = 5, hjust = 0.3))\n\n\nplot2 <- ggplot(resale_data, \n       aes(x = `Transacted Price ($)`, \n           y = `Property Type`,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = NULL,\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"Transacted Price ($)\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\ntheme_ipsum(axis_title_size = 10,\n              base_size = 10,\n              grid = \"Y\")+\n  theme(axis.text.x = element_blank()) +\n  ggtitle(\"Distribution of Transacted Price\") +\n  \n  # Adjust plot size\n  labs(x = \"Transacted Price ($)\", y= NULL) +\n  theme(plot.margin = margin(10, 10, 10, 20), \n        plot.title = element_text(size = 8, hjust = 0.5)) \n\n\nfinal_plot <-plot1 + inset_element(plot2, \n                   left = 0.45, \n                   bottom = 0.35, \n                   right = 1.3, \n                   top = 1.10) + \n  plot_annotation(tag_levels = 'I')\n\n# Print the final plot\nfinal_plot\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nHere are some findings w.r.t `PSF`and `Transaction Prices` across all the `Property Types`:\n\n-   **Finding1:** Both the [Interquartile Range (IQR)]{style=\"color:red;\"} and density distribution is the narrowest for Executive Condominiums, closely followed by Apartments, Condominiums, Semi-Detached, and Terrace Houses. It is the widest for Detached Houses.\n    -   ***What this means is that:*** The spread or variability of the `PSF` is the least for Executive Condominium, followed by Apartments, Condominiums, Semi-Detached, and Terrace Houses. In other words, the *prices for these property types tend to cluster more closely around the median, as indicated by their smaller Interquartile Ranges (IQRs)*.On the other hand, Detached Houses have the largest IQR, indicating that the *prices for Detached Houses are more spread out across a wider range.* This means that there can be *significant variability in prices for Detached Houses*, with some properties priced much higher or lower than the median.\n-   **Finding2:** The [Median ]{style=\"color:red;\"} is the lowest for Detached Houses, followed by Semi-Detached Houses, Executive Condominiums, and Terrace Houses. Condominiums and Apartments have the highest median `PSF`. However, upon comparing this with the distribution plot in Chart II, it becomes apparent that Property Types such as Apartments, Condominiums, and Executive Condominiums also generally have lower median `Transacted Prices`despite having higher `PSF`.\n    -   ***What this means is that:*** Comparing PSF between dissimilar property types, such as a condo and a landed property, may not provide an accurate sense of value and affordability. When comparing properties for value, PSF is best used between two similar property type or better, within the same project or block.(Chong, 2020)\n:::\n\n# 5. Data Visualisation (2)\n\n::: panel-tabset\n## 5.1. Data Prep\n\n### Performing the necessary and additional preprocessing before visualisation\n\nWe can further explore the trend of \\$PSF over different time intervals like months and quarters. First, we need to generate extra date-related variables including `Quarter`, `Month`, and `Year`. Additionally, we've introduced a new variable called `Quarter Year`.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nresale_data <- resale_data %>%\n  mutate(Year = year(`Sale Date`),\n         Quarter = quarter(`Sale Date`),\n         Month = month(`Sale Date`),\n         Quarter_Year = paste0(\"Q\",quarter(`Sale Date`), \" \",year(`Sale Date`))) %>%\n   mutate(\n    Quarter_Year = factor(Quarter_Year,\n                          levels = c(\"Q1 2023\",\n                                     \"Q2 2023\", \"Q3 2023\", \"Q4 2023\", \"Q1 2024\"))\n  )\n```\n:::\n\n\nSecond, monthly average unit prices are calculated for different property types (Apartment, Condo, Executive Condos, and other types like Terrace, Semi-Detached, and Detached). Each calculation involves filtering the resale_data based on property type, converting the Sale Date column to Date type, grouping the data by quarter-year and year-month, and then summarizing the average unit price for each group. Finally, the results are stored in separate data frames (Apartment_monthly_avg, Condo_monthly_avg, ExecCondo_monthly_avg, and Others_monthly_avg).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Calculate monthly average unit price\nApartment_monthly_avg <- resale_data %>%\n  filter(`Property Type`==\"Apartment\") %>%\n  mutate(`Sale Date` = as.Date(`Sale Date`)) %>%\n  group_by(Quarter_Year, Year_Month = format(`Sale Date`, \"%Y-%m\")) %>%\n  summarise(Count = n())\n\n\nCondo_monthly_avg <- resale_data %>%\n  filter(`Property Type`==\"Condo\") %>%\n  mutate(`Sale Date` = as.Date(`Sale Date`)) %>%\n  group_by(Quarter_Year, Year_Month = format(`Sale Date`, \"%Y-%m\")) %>%\n  summarise(Count = n())\n\n\nExecCondo_monthly_avg <- resale_data %>%\n  filter(`Property Type`==\"Executive Condos\") %>%\n  mutate(`Sale Date` = as.Date(`Sale Date`)) %>%\n  group_by(Quarter_Year, Year_Month = format(`Sale Date`, \"%Y-%m\")) %>%\n  summarise(Count = n())\n\n\nOthers_monthly_avg <- resale_data %>%\n  filter(`Property Type` %in% c(\"Terrace\", \"Semi-Detached\", \"Detached\")) %>%\n  mutate(`Sale Date` = as.Date(`Sale Date`)) %>%\n  group_by(Quarter_Year, Year_Month = format(`Sale Date`, \"%Y-%m\")) %>%\n  summarise(Count = n())\n```\n:::\n\n\n## 5.2. Visualisation\n\nFinally, we create column and line charts to visualize the trends in the property sales over time for different property types. It starts by plotting separate charts for apartments, condos, executive condos, and other property types. Each plot represents the average unit price per month, with columns indicating different quarter-years.\n\nThe code then combines all the individual plots into one comprehensive visualization using the *plot_grid()* function.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Plotting column chart for monthly apartment property sales\nplot1 <- ggplot(Apartment_monthly_avg, \n                aes(x = Year_Month, \n                    y = Count, \n                    fill = Quarter_Year)) +\n  geom_col(width = 0.8) + \n  geom_line(aes(group = 1), color = \"black\") +\n  labs(x = NULL, \n       y = \"Apartment\") +\n  scale_fill_manual(values = c(\"#1696d2\", \"#f8766d\", \"#00ba38\", \"#619cff\", \"#f564e3\", \"#a2daff\")) +\n  theme_economist() +\n\n  theme(legend.position = \"none\",  \n        axis.text.y = element_text(angle = 0, size = 8, color = \"black\"),  # Adjust y-axis labels\n        axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 8, color = \"black\", margin = margin(t = 0, r = 0, b = 0, l = 0)),  # Adjust x-axis labels\n        axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)) , \n    plot.margin = margin(0.1, 0.5, 0, 0.5, \"cm\"),  # Set margins\n    panel.grid.major = element_blank(),  # Remove major gridlines\n    panel.grid.minor = element_blank(),  # Remove minor gridlines\n    panel.spacing = unit(0.01, \"lines\"))\n\n# Plotting column chart for Condo monthly property sales\nplot2 <- ggplot(Condo_monthly_avg, \n                aes(x = Year_Month, \n                    y = Count, \n                    fill = Quarter_Year)) +\n  geom_col(width = 0.8) + \n  geom_line(aes(group = 1), color = \"black\") +\n  labs(x = NULL, \n        y = \"Condo\") +\n  scale_fill_manual(values = c(\"#1696d2\", \"#f8766d\", \"#00ba38\", \"#619cff\", \"#f564e3\", \"#a2daff\")) +\n  theme_economist()+\n\n  theme(legend.position = \"none\",  \n        axis.text.y = element_text(angle = 0, size = 8, color = \"black\"),  # Adjust y-axis labels\n        axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 8, color = \"black\", margin = margin(t = 0, r = 0, b = 0, l = 0)),  # Adjust x-axis labels\n        axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)), \n    plot.margin = margin(0, 0.5, 0, 0.5, \"cm\"),  # Set margins\n    panel.grid.major = element_blank(),  # Remove major gridlines\n    panel.grid.minor = element_blank(),  # Remove minor gridlines\n    panel.spacing = unit(0, \"lines\"))\n\n# Plotting column chart for Executive Condo monthly property sales\nplot3 <- ggplot(ExecCondo_monthly_avg, \n                aes(x = Year_Month, \n                    y = Count, \n                    fill = Quarter_Year)) +\n  geom_col(width = 0.8) + \n  geom_line(aes(group = 1), color = \"black\") +\n  labs(x = NULL, \n       y = \"Executive Condo\") +\n  scale_fill_manual(values = c(\"#1696d2\", \"#f8766d\", \"#00ba38\", \"#619cff\", \"#f564e3\", \"#a2daff\")) +\n  theme_economist()+\n  theme(\n    legend.position = \"right\",  # Place legend on the right side\n    legend.direction = \"vertical\",  # Vertical legend\n    legend.title = element_text(size = 10),  # Legend title\n    legend.text = element_text(size = 8),  # Smaller legend text\n    axis.text.y = element_text(angle = 0, size = 8, color = \"black\"),  # Adjust y-axis labels\n    axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 8, color = \"black\", margin = margin(t = 0, r = 0, b = 0, l = 0)),  # Adjust x-axis labels\n    axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)), \n    plot.margin = margin(0, 0.5, 0, 0.5, \"cm\"),  # Set margins\n    panel.grid.major = element_blank(),  # Remove major gridlines\n    panel.grid.minor = element_blank(),  # Remove minor gridlines\n    panel.spacing = unit(0, \"lines\"))\n\n# Plotting column chart for \"Terrace\"Others\" monthly property sales\nplot4 <- ggplot(Others_monthly_avg, \n                aes(x = Year_Month, \n                    y = Count, \n                    fill = Quarter_Year)) +\n  geom_col(width = 0.8) + \n  geom_line(aes(group = 1), color = \"black\") +\n  labs(x = NULL, \n       y = \"Others\") +\n  scale_fill_manual(values = c(\"#1696d2\", \"#f8766d\", \"#00ba38\", \"#619cff\", \"#f564e3\", \"#a2daff\")) +\n  theme_economist() +\n\n  theme(legend.position = \"none\",  \n        axis.text.y = element_text(angle = 0, size = 8, color = \"black\"),  # Adjust y-axis labels\n        axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 8, color = \"black\", margin = margin(t = 0, r = 0, b = 0, l = 0)),  # Adjust x-axis labels\n        axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)), \n    plot.margin = margin(0, 0.5, 0, 0.5, \"cm\"),  # Set margins\n    panel.grid.major = element_blank(),  # Remove major gridlines\n    panel.grid.minor = element_blank(),  # Remove minor gridlines\n    panel.spacing = unit(0, \"lines\"))\n\n\nallplots <- plot1/plot2/plot3/plot4\n\n# Title and subtitle\ntitle <- \"Trends in Property Sales Over Time\"\nsubtitle <- \"Analysis of property sales for Apartments, Condominiums, Executive Condominiums, and Others\"\n\n# Add title and subtitle\nallplots_with_title <- allplots + plot_annotation(\n  title = title,\n  caption = subtitle,\n  theme = theme(plot.title = element_text(size = 14, face = \"bold\"),\n                plot.caption = element_text(size = 9, face = \"italic\"))\n)\n\n# Print combined plot with title and subtitle\nprint(allplots_with_title)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n*General Trend:*\n\n-   Results show that most of the Property Types' sales tend to spike at least once between end of Q2 2023 to August 2023.\n-   Property Sales tend to be lower during Q4 2023 and start of Q1 2024.\n-   Property Sales tend to peak for a month or so instead of a few months at a time.\n\n*Specific Property Trends:*\n\n-   Apartment and Executive Condominium sales tend to be more volatile with higher variation throughout the year.\n-   Condominium sales trend is quite flat throughout the year from Q1 2023 to Q1 2024.\n-   \"Others\" sales trend is also quite flat throughout the year from Q1 2023 to Q1 2024 with the exception of June 2023.\n-   \n:::\n\n# 6. Data Visualisation (3)\n\nIn this section, we want to figure out which property type does the majority of the buyers convert from and to which property type too. This can be achieved by analyzing the `Purchase Address Indicator`\n\n::: panel-tabset\n\n## 6.1. Data Prep\n\n### Performing the necessary and additional preprocessing before visualisation\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\npurchaseindicator_allsales <- combined_data %>%\n  filter(`Number of Units` == 1)%>%\n  filter(grepl(\"99 yrs\", Tenure, ignore.case = TRUE)) %>%\n  filter(!(`Purchaser Address Indicator`==\"N.A\")) %>%\n  group_by(`Property Type`,`Purchaser Address Indicator`) %>%\n  summarise(Count = n())\n```\n:::\n\n\n## 6.2. Data Visualisation\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Plot a stacked bar chart for 'Apartment' sales\nstacked_bar <- ggplot(purchaseindicator_allsales, aes(x = `Property Type`, y = Count, fill = `Purchaser Address Indicator`)) +\n  geom_bar(stat = \"identity\") +\n  labs(x = NULL, y = \"Count\", fill = \"Purchaser Address Indicator\") +\n  scale_fill_manual(values = c(\"Private\" = \"#1696d2\", \"HDB\" = \"#f8766d\")) +  # Adjust fill colors\n  theme_economist() +\n  theme(\n    legend.position = \"right\",  # Place legend on the right side\n    legend.direction = \"vertical\",  # Vertical legend\n    axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 8, color = \"black\"),  # Adjust x-axis labels\n    axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),  # Adjust y-axis title margin\n    plot.margin = margin(0.1, 0.5, 0, 0.5, \"cm\"),  # Set margins\n    panel.grid.major = element_blank(),  # Remove major gridlines\n    panel.grid.minor = element_blank(),  # Remove minor gridlines\n    panel.spacing = unit(0.01, \"lines\")\n  ) +\n  \n  plot_annotation(title = \"Distribution of Converters across Property Types\",\n                  subtitle = \"House buyers are mostly past private property owners with the exception for executive condos.\")\n\n# Print the stacked bar chart\nprint(stacked_bar)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\nFrom our findings:\n\n-   Most of the HDB converters purchase Apartment, Condos and Executive Condos. Few purchased Detached , semi-Detached and Terrace Houses\n\n-   Also, most of the house buyers are mostly past private property owners with the exception for executive condos.\n\n:::\n\n## References\n\n-   [Why Does A Condo Have A Higher Price Per Square Foot Than A bungalow?](https://ronchongproperty.sg/why-does-a-condo-have-a-higher-price-per-square-foot-than-a-bungalow/)\n",
    "supporting": [
      "Take-Home_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}