---
title: "Take Home Exercise 3: WORK IN PROGRESS"
author: "Ten Wei Peng"
date: "May 13, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# Overview


# 1.Data Preparation

## 1.1 Loading R Packages

```{r}
#| code-fold: true
#| code-summary: "Show the code" 
pacman::p_load(tidyverse, sf, sp, lwgeom, tmap, units, maps, igraph, tidygraph, ggraph, visNetwork, lubridate, jsonlite, httr,tmap,viridis,plotly)

```

## 1.2. Loading the Data

```{r}
#| code-fold: true
#| code-summary: "Show the code" 
mc2_data <- fromJSON("data/mc2_edited.json")
```
  
```{r}
#| code-fold: true
#| code-summary: "Show the code"   
mc2_links_prep <- as_tibble(mc2_data$links) %>%
  distinct() %>%
  mutate(source = as.character(source),
         target = as.character(target),
         type = as.character(type),
         dwell = as.character(dwell),
         raw_source = as.character(raw_source),
         time =  as.POSIXct(time, format="%Y-%m-%dT%H:%M:%OS", tz="UTC"),
         date = as.Date(as.character(date), format = "%Y-%m-%d"),
         ping_date = as.Date(as.POSIXct(time, format="%Y-%m-%dT%H:%M:%OS", tz="UTC"))) %>%
  select(type, time, dwell, source, target, date, ping_date,raw_source)


mc2_links <- mc2_links_prep%>%
  group_by(source, target, type) %>%
  summarise(weights = n(), .groups = 'drop') %>%
  filter(source != target) %>%
  ungroup()

# Convert nodes to tibble, modify variable types, and select required columns
mc2_nodes <- as_tibble(mc2_data$nodes) %>%
  mutate(
    type_original = type,
    id = as.character(id), 
    type = as.character(type),
    type = case_when(
      type %in% c("Entity.Vessel.CargoVessel", "Entity.Vessel.Ferry.Cargo", "Entity.Vessel.FishingVessel", "Entity.Vessel", "Entity.Vessel.Other") ~ "Entity.Vessel",
      TRUE ~ type
    ),
    tonnage = as.numeric(as.character(tonnage)),
    length_overall = as.numeric(as.character(length_overall)), 
    Activities = as.character(Activities), 
    fish_species_present = as.character(fish_species_present), 
    kind = as.character(kind), 
    flag_country = as.character(flag_country),
    company = as.character(company),
    raw_source = as.character(raw_source),
    namee = as.character(name), 
    last_edited_by = as.POSIXct(strptime(as.character(last_edited_by), format = "%Y-%m-%dT%H:%M:%OS")),
    last_edited_date = as.POSIXct(strptime(as.character(last_edited_date), format = "%Y-%m-%dT%H:%M:%OS")),
    date_added = as.POSIXct(strptime(as.character(date_added), format = "%Y-%m-%dT%H:%M:%OS"))
  ) %>%
  select(id, type,type_original, namee, company, flag_country, Activities, tonnage, length_overall, raw_source, fish_species_present, kind)


```

## 1.3. Data Cleaning

::: panel-tabset
### Links
```{r}
# Check for columns with missing values
colSums(is.na(mc2_links))
```

```{r}
#| code-fold: true
#| code-summary: "Show the code" 
summary(mc2_links_prep)

```




```{r}
#| code-fold: true
#| code-summary: "Show the code" 
mc2_links[duplicated(mc2_links),]
```


```{r}
#| code-fold: true
#| code-summary: "Show the code" 
glimpse(mc2_links)
```



```{r}
#| eval: false
#| code-fold: true
#| code-summary: "Show the code" 
unique_type <- unique(mc2_links$type)
print(unique_type)
```

**Define a function to count and print unique categories for a given column.**

```{r}
#| code-fold: true
#| code-summary: "Show the code" 
count_unique_categories <- function(data, column_name) {
  cat("**", column_name, "**\n", sep = "")
  category_counts <- table(data[[column_name]])
  sorted_counts <- sort(category_counts, decreasing = TRUE)
  print(sorted_counts)
}
```

```{r}
#| eval: false
#| code-fold: true
#| code-summary: "Show the code" 
count_unique_categories(mc2_links, 'type') 
```


### Nodes

```{r}
#| code-fold: true
#| code-summary: "Show the code" 
glimpse(mc2_nodes)

```


```{r}
#| code-fold: true
#| code-summary: "Show the code" 
# Check for columns with missing values
colSums(is.na(mc2_nodes))
```



```{r}
#| code-fold: true
#| code-summary: "Show the code" 
mc2_nodes[duplicated(mc2_nodes),]
```


```{r}
#| eval: false
#| code-fold: true
#| code-summary: "Show the code" 
unique_type <- unique(mc2_nodes$type)
print(unique_type)
```

```{r}
#| eval: false
#| code-fold: true
#| code-summary: "Show the code" 
count_unique_categories(mc2_nodes, 'type') 
count_unique_categories(mc2_nodes, 'flag_country') 
count_unique_categories(mc2_nodes, 'company') 
count_unique_categories(mc2_nodes, 'kind') 

```
```{r}
count_unique_companies <- length(unique(mc2_nodes$company))
count_unique_companies
```


### Geographical Information
```{r}
#| code-fold: true
#| code-summary: "Show the code" 
# Read the GeoJSON file
geojson_file <- "data/Oceanus Information/Oceanus Geography.geojson"
geo_data <- st_read(geojson_file) %>%
  rename(id = Name)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code" 
# Visualize the geographical data with tmap
tmap_mode("plot")

tm_shape(geo_data) +
  tm_polygons(alpha = 0.5) +
  tm_borders(lwd = 1, alpha = 0.5) +
  tm_layout(frame = FALSE) +
  tmap_style("gray") +
  tm_shape(geo_data) +
  tm_dots(col = "purple", size = 0.2) +
  tm_text(text = "id", size = 0.6, col = "black") +  # Add labels to the locations
  tm_layout(legend.position = c("left", "bottom"))
```

:::


## Task 2 (part 1) : EDA


::: panel-tabset
### Filter and Prepare Data

#### Extracting Commodity Fish Data
Let's derive a function to retrieve the unique fish species found in specific regions.

```{r}
#| code-fold: true
#| code-summary: "Show the code" 

commodityfish <- mc2_nodes %>%
  filter(type == "Entity.Commodity.Fish")

# Extract and transform Fish Species data
fishspecies_expanded <- mc2_nodes %>%
  filter(type == "Entity.Location.Region") %>%
  mutate(Fish_Species = str_remove_all(fish_species_present, 'c\\(|\\)|"')) %>%
  mutate(Fish_Species = str_split(Fish_Species, ",\\s*")) %>%
  unnest(Fish_Species) %>%
  mutate(Fish_Species = str_trim(Fish_Species)) %>%
  rename(Region = id)

# Join with Commodity Fish data
fishspecies_expanded <- fishspecies_expanded %>%
  left_join(commodityfish, by = c("Fish_Species" = "namee")) %>%
  select(Region, Fish_Species, id)

# Function to get commodity fish IDs for specific regions
get_commodity_fish_ids <- function(..., regions = NULL) {
  fishspecies_expanded %>%
    filter(Region %in% c(..., regions)) %>%
    pull(id)
}

```


#### Preparing Harbor Report Data
Let's derive a function to retrieve the unique fish species found in specific regions.

```{r}
harboureport_culprit<- mc2_links_prep %>%
  filter(type == "Event.HarborReport") %>%
  filter(source %in% c("snappersnatcher7be","roachrobberdb6")) %>%
  rename(vessel = source) %>%
  rename(city = target) %>%
  rename(harboreporting_date = date) %>%
  select(city, vessel, type, harboreporting_date)
```



####. Processing Transaction Data

Retrieve and process transaction data to identify suspicious transactions.


Let's retrieve the `Transaction` data by applying the filter `type == "Event.Transaction"` for our links data

We then perform a self-join on the transaction dataset on `source` column to get the respective `city` and `fish` column for each cargo delivery, filtering for only the two cities we observed earlier 'City of Paackland', 'City of Lomark' which `snappersnatcher7b` frequented.


```{r}
# Retrieve and process transaction data
transactions <- mc2_links_prep %>%
  filter(type == "Event.Transaction") %>%
  filter(!is.na(source) & !is.na(target)) %>%
  group_by(source) %>%
  mutate(row_number = row_number()) %>%
  pivot_wider(names_from = row_number, values_from = target) %>%
  rename(city = `2`, fish = `1`) %>%
  rename(transaction_date = date) %>%
  select(source, fish, city, type, transaction_date) %>%
  inner_join(commodityfish, by = c("fish" = "id"))

```
No duplicated transaction records were found after the self-join
```{r}
#| code-fold: true
#| code-summary: "Show the code" 
duplicated_transactions <- transactions[duplicated(transactions$source), ]
duplicated_transactions
```

#### Filtering and Preparing Nodes and Links

```{r}
#| code-fold: true
#| code-summary: "Show the code" 

# Filter and prepare nodes
mc2_nodes_suspect <- mc2_nodes %>%
  filter(type %in% c('Entity.Vessel', 'Entity.Location.Point', 'Entity.Location.City', 'Entity.Location.Region')) %>%
  filter(!(type == 'Entity.Vessel' & company != "SouthSeafood Express Corp"))

# Filter and prepare nodes
mc2_links_filtered <- mc2_links %>%
  filter(type %in% c('Event.TransportEvent.TransponderPing','Event.Transaction',"Event.HarborReport"))

# Extract relevant node IDs
filtered_node_ids <- mc2_nodes_suspect$id

# Filter and prepare edges
mc2_links_suspect <- mc2_links_filtered %>%
  filter(source %in% filtered_node_ids & target %in% filtered_node_ids)

# Ensure no missing nodes in the filtered links
missing_nodes <- setdiff(unique(c(mc2_links_suspect$source, mc2_links_suspect$target)), mc2_nodes_suspect$id)
if(length(missing_nodes) > 0) {
  mc2_links_suspect <- mc2_links_suspect %>%
    filter(!source %in% missing_nodes & !target %in% missing_nodes)
}

```
### Construct the Graph

```{r}
#| code-fold: true
#| code-summary: "Show the code" 
# Create the graph with filtered nodes and edges
mc2_graph <- tbl_graph(nodes = mc2_nodes_suspect, edges = mc2_links_suspect, directed = TRUE) %>%
  mutate(betweenness_centrality = centrality_betweenness(),
         closeness_centrality = centrality_closeness(),
         degree_centrality = centrality_degree())
```


### Visualisation

```{r}
#| code-fold: true
#| code-summary: "Show the code" 
# Filter the graph to include only nodes with edges
mc2_graph_with_edges <- mc2_graph %>%
  filter(!node_is_isolated())

# Visualization with filtered nodes
mc2_graph_with_edges %>%
  ggraph(layout = "fr") +
  geom_edge_link(aes(alpha = 0.5), show.legend = FALSE) +
  geom_node_point(aes(
    size = degree_centrality,
    color = type,
    alpha = 0.3)) +
  geom_node_text(aes(label = id), repel = TRUE, size = 3, vjust = 1.5) +  # Add labels to nodes
  scale_size_continuous(range = c(1, 10)) +
  scale_color_manual(values = c("Entity.Vessel" = "blue", 
                                "Entity.Location.Point"= "red",
                                "Entity.Location.Region" ="green",
                                "Entity.Location.City" = "lightblue"
                                )) +
  labs(title = "SouthSeafood Express Corp's Activities",
       color = "Node Type",
       size = "Degree Centrality")
```

::: 


### Interactive VIsualisation

```{r}
#| code-fold: true
#| code-summary: "Show the code" 
# Aggregate edges data
mc2_links_suspect <- mc2_links_suspect %>%
  left_join(mc2_nodes_suspect, by = c("source" = "id")) %>%
  rename(from = source) %>%
  left_join(mc2_nodes_suspect, by = c("target" = "id")) %>%
  rename(to = target) %>%
  group_by(from, to) %>%
  summarise(weight = sum(weights)) %>%
  filter(from != to) %>%
  filter(weight > 1) %>%
  ungroup()

connected_nodes <- unique(c(mc2_links_suspect$from, mc2_links_suspect$to))

# Filter out isolated nodes
mc2_nodes_suspect <- mc2_nodes_suspect %>%
  filter(id %in% connected_nodes) %>%
  rename(group = type) %>%
  mutate(label = ifelse(group %in% c('Entity.Vessel', 'Entity.Location.Point', 'Entity.Location.City',"Entity.Location.Region"), id, NA)) %>%
  group_by(company) %>%
  mutate(id1 = if_else(group == "Entity.Vessel" & company != "" & !is.na(company),
                       paste0(company, row_number()),
                       if_else(group == "Entity.Vessel" & (company == "" | is.na(company)), id, NA_character_)),
         id1 = if_else(group != "Entity.Vessel", id, id1)) %>%
  ungroup()


### Visualize the Graph

# Visualize the resulting graph
visNetwork(mc2_nodes_suspect, mc2_links_suspect) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visLegend() %>%
  visLayout(randomSeed = 123) %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 1),
             nodesIdSelection = TRUE,
             selectedBy = "type")  # Add type dropdown


```









## Task 2 (part 2) : Deep Investigations into "snappersnatcher7b"


::: panel-tabset


### 1. Fish Species in Ghoti Preserve
From the EDA/ visualisation earlier, it seems `"snappersnatcher7be"` frequents:

- Locations: `"Nav1"`, `"Nav2"` which is extremely near `"Ghoti Preserve"`

- Region: `"Wrasse Beds"` , `"Ghoti Preserve"`, `"Cod Table"`

- City: `City of Paackland` and `City of Lomark`


Hence, let's dentify the fish species commonly found in the "Ghoti Preserve" region.

In `"Ghoti Preserve"`, these are the fish species that commonly found. The names are as below:

```{r}
#| code-fold: true
#| code-summary: "Show the code" 
# Retrieve unique fish species in Ghoti Preserve
unique_fish_species_ghoti <- fishspecies_expanded %>%
  filter(Region == "Ghoti Preserve") %>%
  pull(Fish_Species) %>%
  unique()

# Print the unique Fish_Species
print(unique_fish_species_ghoti)
```


### 2. Suspicious Transactions

Merge the transactions with HarborReport data to identify relevant suspicious transactions.


Next, we proceed with the HarborReport data by applying filter type == `Event.HarborReport` to our links dataset and retrieve only`snappersnatcher7b`'s records then merge with transactions dataset to filter out relevant suspicious transactions given the fact that the harbor reports are likely to be a few days after the transaction.

Note that, this is a rough merge on city, hence we are just narrowing down and end up with likely pairs of transactions with snappersnatcher7be's harbor reporting to guess its cargo


```{r}
#| code-fold: true
#| code-summary: "Show the code" 
# Retrieve HarborReport data for "snappersnatcher7be"
harboureport_culprit<- mc2_links_prep %>%
  filter(type == "Event.HarborReport") %>%
  filter(source =="snappersnatcher7be") %>%
  rename(vessel = source) %>%
  rename(city = target) %>%
  rename(harboreporting_date = date) %>%
  select(city, vessel, type, harboreporting_date)


# Merge with transactions and apply filter condition
merged_data <- merge(transactions, harboureport_culprit, by = "city", all.x = TRUE)


filtered_transactions <- merged_data %>%
  filter(harboreporting_date >= transaction_date + 1 &  # Change the number based on your lag
         harboreporting_date <= transaction_date + 3) %>%
  select(namee, fish, city,harboreporting_date,transaction_date, vessel)

```

```{r}
# Filter out entries where namee is not "Cod/Gadus n.specificatae"
filtered_transactions <- filtered_transactions %>%
  filter(namee != "Cod/Gadus n.specificatae")


joined_data <- merge(filtered_transactions, fishspecies_expanded, by.x = "namee", by.y = "Fish_Species", all.x = TRUE)
unique_regions <- unique(joined_data$Region)
unique_regions

```

```{r}
#| code-fold: true
#| code-summary: "Show the code" 

# Create the timeline plot
ggplot(filtered_transactions)  +
  geom_segment(aes(x = transaction_date, xend = harboreporting_date, y = namee, yend = namee, color = vessel), size = 1.5) +
  geom_point(aes(x = transaction_date, y = namee, color = vessel, shape = city), size = 3) +
  labs(title = "Suspicious Transactions and Harbor Reports for roachrobberdb6", x = "Date", y = "Cargo Type") +
  theme_minimal() +
  scale_color_discrete(name = "Vessel") +
  scale_shape_discrete(name = "City") +  # Add legend for city
  theme(
    plot.title = element_text(hjust = 0, face = "bold"),  # Align the title to the left
    plot.title.position = "plot"                          # Ensure title alignment is based on the entire plot area
  )

```


### 3. Suspicious Findings

From our observations, "snappersnatcher7be" is likely carrying the following cargo:

- "Cod/Gadus n.specificatae" around 20th March and

- "Wrasse/Labridae n.refert" around 8th May


```{r}
#| code-fold: true
#| code-summary: "Show the code" 
print(unique(filtered_transactions$namee))
```

Additionally, we found its transportation activities suspicious due to its frequent visits to "Ghoti Preserve":

- `"Nav 1"`: 17 occurences
- `"Nav 2"`: 7 occurences

For legitimate occurrences related to "Wrasse/Labridae n.refert", there's fewer:

- `"Nav C"`: 10 occurences
- `"Wrasse Beds"`: 3 occurences


```{r}
#| code-fold: true
#| code-summary: "Show the code" 
# Retrieve TransponderPing data for "snappersnatcher7be"
transponder_culprit <- mc2_links_prep %>%
  filter(type == "Event.TransportEvent.TransponderPing",
         target == "snappersnatcher7be",
         time <= "2035-05-09",
         time >= "2035-04-09")

# Count unique categories in the 'source' column
count_unique_categories(transponder_culprit, 'source') 

```


Bar Plot for Suspicious and Legitimate Transportation Activities
```{r}
#| code-fold: true
#| code-summary: "Show the code" 
# Data for transportation activities
location_counts <- transponder_culprit %>%
  filter(!source %in% c('Cod Table', 'Exit East',"City of Paackland", "City of Lomark")) %>% 
  group_by(source) %>%
  summarise(Occurrences = n()) %>%
  ungroup() %>%
  rename(Location = source) %>%
  mutate(Type = case_when(
    Location %in% c("Nav 1", "Nav 2") ~ "Suspicious",
    TRUE ~ "Legitimate"
  ))

# Reorder Location factor levels so "Suspicious" locations appear at the top
location_counts <- location_counts %>%
  mutate(Location = factor(Location, levels = unique(Location[order(Type, decreasing = TRUE)])))

# Bar plot for transportation activities
ggplot(location_counts, aes(x = Occurrences, y = Location, fill = Type)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Transportation Activities of snappersnatcher7be", x = "Number of Occurrences", y = "Location") +
  scale_fill_manual(values = c("Suspicious" = "red", "Legitimate" = "blue")) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0, face = "bold"),  # Align the title to the left
    plot.title.position = "plot"                          # Ensure title alignment is based on the entire plot area
  )
```


3. Geographical Plot 

```{r}
#| code-fold: true
#| code-summary: "Show the code" 

location_counts <- transponder_culprit %>%
  filter(source %in% c('Cod Table', 'Exit East',"City of Paackland", "City of Lomark","Nav 1", "Nav 2", "Ghoti Preserve", "Exit East", "Nav C", "Wrasse Beds", "Don Limpet Preserve")) %>% 
  group_by(source) %>%
  summarise(Occurrences = n()) %>%
  ungroup() %>%
  rename(Location = source) %>%
  mutate(Marked = case_when(
    Location %in% c("Nav 1", "Nav 2") ~ "Suspicious",   TRUE ~ "Legitimate"
  )) %>%
  mutate(Location = factor(Location, levels = unique(Location[order(Marked, decreasing = TRUE)])))  # Reorder Location factor levels

# Merge location counts with geo data
geo_data_0 <- left_join(geo_data, location_counts, by = c("id" = "Location"))

# Extract coordinates from geometry data
coords_0 <- st_coordinates(st_centroid(geo_data_0))

# Add coordinates to the geo_data
geo_data_0$Longitude <- coords_0[,1]
geo_data_0$Latitude <- coords_0[,2]


# Filter for specific IDs to label
label_ids_0 <- c('Cod Table', 'Exit East', 'City of Paackland', 'City of Lomark', 'Nav 1', 'Nav 2', 'Ghoti Preserve', 'Exit East', 'Nav C', 'Wrasse Beds', 'Don Limpet Preserve')
geo_data_labels_0 <- geo_data_0 %>%
  filter(id %in% label_ids_0)

# Set plot size (for RStudio or other environments that support resizing)
options(repr.plot.width = 10, repr.plot.height = 8)

# Geographical plot with labels
ggplot() +
  geom_sf(data = geo_data_labels_0, aes(geometry = geometry, color = Marked)) +
  geom_text(data = geo_data_labels_0 , aes(x = Longitude, y = Latitude, label = id), size = 2, color = "black", fontface = "bold") +
  scale_color_manual(values = c("Suspicious" = "red", "Legitimate" = "blue")) +
  labs(title = "Geographical Plot of snappersnatcher7be Activities") +
  theme_minimal() +
  theme(plot.title = element_text(size = 16),  # Enlarge title
        legend.title = element_text(size = 12),  # Enlarge legend title
        legend.text = element_text(size = 10),  # Enlarge legend text
        axis.text = element_text(size = 10),  # Enlarge axis text
        axis.title = element_text(size = 12))  # Enlarge axis title
```






:::




## Task 2 (part 3) : Deep Investigations into "roachrobberdb6"

::: panel-tabset

### 1. Suspicious Transactions

Merge the transactions with HarborReport data to identify relevant suspicious transactions.


Next, we proceed with the HarborReport data by applying filter type == `Event.HarborReport` to our links dataset and retrieve only`snappersnatcher7b`'s records then merge with transactions dataset to filter out relevant suspicious transactions given the fact that the harbor reports are likely to be a few days after the transaction.

Note that, this is a rough merge on city, hence we are just narrowing down and end up with likely pairs of transactions with snappersnatcher7be's harbor reporting to guess its cargo


```{r}
#| code-fold: true
#| code-summary: "Show the code" 
# Retrieve HarborReport data for "roachrobberdb6"
harboureport_culprit1<- mc2_links_prep %>%
  filter(type == "Event.HarborReport") %>%
  filter(source =="roachrobberdb6") %>%
  rename(vessel = source) %>%
  rename(city = target) %>%
  rename(harboreporting_date = date) %>%
  select(city, vessel, type, harboreporting_date)


# Merge with transactions and apply filter condition
merged_data1 <- merge(transactions, harboureport_culprit1, by = "city", all.x = TRUE)


filtered_transactions1 <- merged_data1 %>%
  filter(harboreporting_date >= transaction_date + 1 &  # Change the number based on your lag
         harboreporting_date <= transaction_date + 3) %>%
  select(namee, fish, city,harboreporting_date,transaction_date, vessel)

```

```{r}
# Filter out entries where namee is not "Cod/Gadus n.specificatae"
filtered_transactions1 <- filtered_transactions1 %>%
  filter(namee != "Cod/Gadus n.specificatae")


joined_data <- merge(filtered_transactions1, fishspecies_expanded, by.x = "namee", by.y = "Fish_Species", all.x = TRUE)
unique_regions <- unique(joined_data$Region)
unique_regions

```


```{r}
#| code-fold: true
#| code-summary: "Show the code" 

# Create the timeline plot
ggplot(filtered_transactions1) +
  geom_segment(aes(x = transaction_date, xend = harboreporting_date, y = namee, yend = namee, color = vessel), size = 1.5) +
  geom_point(aes(x = transaction_date, y = namee, color = vessel, shape = city), size = 3) +
  labs(title = "Suspicious Transactions and Harbor Reports for roachrobberdb6", x = "Date", y = "Cargo Type") +
  theme_minimal() +
  scale_color_discrete(name = "Vessel") +
  scale_shape_discrete(name = "City") +  # Add legend for city
  theme(
    plot.title = element_text(hjust = 0, face = "bold"),  # Align the title to the left
    plot.title.position = "plot"                          # Ensure title alignment is based on the entire plot area
  )
```


### 2. No Suspicious Findings

From our observations, "roachrobberdb6" is likely carrying the following cargo:

- "Wrasse/Labridae n.refert" around February and April

- "Harland/Piscis sapidum" in April


```{r}
#| code-fold: true
#| code-summary: "Show the code" 
print(unique(filtered_transactions1$namee))
```


We did not manage to find its fishing activities suspicious between the period however for the date range. It is likely not to be suspicious.

- `"Nav C"`: 38 occurences
- `"Wrasse Beds"`: 42 occurences


```{r}
#| code-fold: true
#| code-summary: "Show the code" 
# Retrieve TransponderPing data for "roachrobberdb6"
transponder_culprit1 <- mc2_links_prep %>%
  filter(type == "Event.TransportEvent.TransponderPing",
         target == "roachrobberdb6",
         time <= "2035-04-05",
         time >= "2035-03-20")

# Count unique categories in the 'source' column
count_unique_categories(transponder_culprit1, 'source') 

```


#### Bar Plot for Suspicious and Legitimate Transportation Activities
```{r}
#| code-fold: true
#| code-summary: "Show the code" 
# Data for transportation activities
location_counts1 <- transponder_culprit1 %>%
  filter(!source %in% c('Cod Table', 'Exit East',"City of Paackland", "City of Lomark","City of Himark")) %>% 
  group_by(source) %>%
  summarise(Occurrences = n()) %>%
  ungroup() %>%
  rename(Location = source) %>%
  mutate(Type = case_when(
    Location %in% c("Nav 1", "Nav 2") ~ "Suspicious",
    TRUE ~ "Legitimate"
  ))

# Reorder Location factor levels so "Suspicious" locations appear at the top
location_counts1 <- location_counts1 %>%
  mutate(Location = factor(Location, levels = unique(Location[order(Type, decreasing = TRUE)])))

# Bar plot for transportation activities
ggplot(location_counts1, aes(x = Occurrences, y = Location, fill = Type)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Transportation Activities of roachrobberdb6", x = "Number of Occurrences", y = "Location") +
  scale_fill_manual(values = c("Suspicious" = "red", "Legitimate" = "blue")) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0, face = "bold"),  # Align the title to the left
    plot.title.position = "plot"                          # Ensure title alignment is based on the entire plot area
  )
```


#### Geographical Visualisation
```{r}
#| code-fold: true
#| code-summary: "Show the code" 

# Create location_counts1 with the Marked column
location_counts1 <- transponder_culprit1 %>%
  filter(source %in% c('Cod Table', 'Exit East',"City of Paackland", "City of Lomark","Nav 1", "Nav 2", "Ghoti Preserve", "Exit East", "Nav C", "Wrasse Beds", "Don Limpet Preserve","Nemo Preserve","Tuna Shelf")) %>% 
  group_by(source) %>%
  summarise(Occurrences = n()) %>%
  ungroup() %>%
  rename(Location = source) %>%
  mutate(Marked = case_when(
    Location %in% c("Nav 1", "Nav 2") ~ "Suspicious",   
    TRUE ~ "Legitimate"
  )) %>%
  mutate(Location = factor(Location, levels = unique(Location[order(Marked, decreasing = TRUE)])))  # Reorder Location factor levels

# Merge location counts with geo_data to include the Marked column
geo_data_1 <- left_join(geo_data, location_counts1, by = c("id" = "Location"))

# Extract coordinates from geometry data
coords_1 <- st_coordinates(st_centroid(geo_data_1))
# Warning: st_centroid assumes attributes are constant over geometries

# Add coordinates to the geo_data
geo_data_1$Longitude <- coords_1[,1]
geo_data_1$Latitude <- coords_1[,2]

# Filter for specific IDs to label
label_ids <- c('Cod Table', 'Exit East', 'City of Paackland', 'City of Lomark', 'Nav 1', 'Nav 2', 'Ghoti Preserve', 'Exit East', 'Nav C', "Wrasse Beds", "Don Limpet Preserve","Nemo Preserve","Tuna Shelf")
geo_data_labels_1 <- geo_data_1 %>%
  filter(id %in% label_ids)

# Set plot size (for RStudio or other environments that support resizing)
options(repr.plot.width = 10, repr.plot.height = 8)

# Geographical plot with labels
ggplot() +
  geom_sf(data = geo_data_labels_1, aes(geometry = geometry, color = geo_data_labels_1$Marked)) +
  geom_text(data = geo_data_labels_1 , aes(x = Longitude, y = Latitude, label = id), size = 2, color = "black", fontface = "bold") +
  scale_color_manual(values = c("Suspicious" = "red", "Legitimate" = "blue")) +
  labs(title = "Geographical Plot of roachrobberdb6 Activities") +
  theme_minimal() +
  theme(plot.title = element_text(size = 16),  # Enlarge title
        legend.title = element_text(size = 12),  # Enlarge legend title
        legend.text = element_text(size = 10),  # Enlarge legend text
        axis.text = element_text(size = 10),  # Enlarge axis text
        axis.title = element_text(size = 12))  # Enlarge axis title
```


:::




## Task 2 (part 4) : Transshipment Analysis



### 1. Extract  Movement Data
First, we extract vessel movement data from the mc2_links_prep dataset. Specifically, we are filtering the data to retain only the transponder ping events, which represent instances of vessel movement. Each ping event is associated with a location, vessel ID, and timestamp.


```{r}
#| code-fold: true
#| code-summary: "Show the code"   
# Extract transponder ping data for vessel movements
transponder_pings <- mc2_links_prep %>%
  filter(type == "Event.TransportEvent.TransponderPing") %>%
  rename(location = source, vessel = target, ping_date = ping_date) %>%
  mutate(ping_id = row_number())  # Add a unique identifier for each row

```


### 2. Identify Vessel Pairs at the Same Location and Time

Next, we're identifying pairs of vessels that are at the same location at the same time. This is achieved through a self-join operation on the transponder ping data. After ensuring that the same vessel is not paired with itself, we select distinct pairs to avoid duplicates.

```{r}
#| code-fold: true
#| code-summary: "Show the code"   
# Perform a self-join to find pairs of vessels at the same location and time
vessel_pairs <- transponder_pings %>%
  inner_join(transponder_pings, by = c("location", "ping_date")) %>%
  filter(ping_id.x < ping_id.y) %>%  # Ensure we do not pair the same id 
  filter(vessel.x != vessel.y) %>%  # Ensure we do not pair the same vessel
  
  select(
    vessel1 = vessel.x,
    vessel2 = vessel.y,
    location,
    ping_date
  )
```


### 3. Aggregate and Analyze Transshipments

In this section, we aggregate and analyze the transshipment data. We aggregate the count of vessel pairs by date. Then, we join the vessel pairs with company information to identify the companies involved in transshipments. Finally, we group the transshipment data by company pairs and date to analyze the frequency of transshipments.

```{r}
#| code-fold: true
#| code-summary: "Show the code"   
# Aggregate the count of vessel pairs by date
transshipments_count <- vessel_pairs %>%
  mutate(date = as.Date(ping_date)) %>%
  group_by(date) %>%
  summarise(transshipments = n())

# Join vessel_pairs with mc2_nodes to get the company information
vessel_pairs_with_company <- vessel_pairs %>%
  left_join(mc2_nodes %>% select(id, company), by = c("vessel1" = "id")) %>%
  rename(company1 = company) %>%
  left_join(mc2_nodes %>% select(id, company), by = c("vessel2" = "id")) %>%
  rename(company2 = company)

# Group vessel pairs by company
transshipments_by_company <- vessel_pairs_with_company %>%
  filter(company1 == company2) %>%
  mutate(date = as.Date(ping_date)) %>%  # Ensure date column is present
  mutate(transshipment = ifelse(duplicated(cbind(company1, company2, date)) | 
                                duplicated(cbind(company2, company1, date)), 0, 1)) %>%  # Set transshipments to 0 if duplicated
  group_by(company1, company2, date) %>%
  summarise(transshipments = sum(transshipment)) %>%
  ungroup()

# Filter and summarise transshipments for vessel pairs belonging to the same company
same_company_transshipments <- transshipments_by_company %>%
  group_by(company1, company2) %>%
  summarise(transshipments = sum(transshipments)) %>%
  ungroup()

```

### 4. Visualize Transshipment Data for Specific Company

Finally, we're visualizing the transshipment data for a specific company, "SouthSeafood Express Corp". This plot shows the timeline of transshipments for vessel pairs belonging to this company.

```{r}
#| code-fold: true
#| code-summary: "Show the code"   
# Filter vessel pairs belonging to the same company "SouthSeafood Express Corp"
SouthSeafood_transshipments <- transshipments_by_company %>%
  filter(company1 == "SouthSeafood Express Corp" & company2 == "SouthSeafood Express Corp")
```


```{r}
#| code-fold: true
#| code-summary: "Show the code"   
# Create a plot
ggplot(SouthSeafood_transshipments, aes(x = date, y = transshipments)) +
  geom_line() +
  geom_point() +
  labs(title = "Transshipments for Vessel Pairs of SouthSeafood Express Corp",
       x = "Date",
       y = "Transshipments Count") +
  theme_minimal()
```

## Task 2 (part 5) : Insights from Visualisations


::: callout-note
**Suspicious Movement and Catch Contents of SouthSeafood Express Corp**

-   **Movement Patterns**:

  -   The vessel "snappersnatcher7be" shows frequent visits to suspicious locations such as "Nav 1" (17 occurrences) and "Nav 2" (7 occurrences), which are near "Ghoti Preserve".
  
  -   The visualization illustrates a significant number of transshipment events involving vessels associated with "SouthSeafood Express Corp." These events, occurring over a period of time, indicate a pattern of coordinated activities suggestive of illicit practices.The plotted data reveals a consistent trend of transshipment occurrences over time, which deviates significantly from normal maritime operations. The frequency and pattern of these events suggest deliberate efforts to transfer goods between vessels, potentially for illegal purposes such as smuggling or avoiding regulatory oversight.

-   **Catch Contents**:

  -   The vessel "snappersnatcher7be" is suspected of carrying cargo such as "Wrasse/Labridae n.refert" which is found only in "Ghoti Preserve" , "Wrasse Beds" and "Nemo Reef." However, our visualisation reveals that it does not venture near "Nemo Reef" and it spends an equal amount of time at "Wrasse Beds" and locations near "Ghoti Preserve"
  
:::


::: callout-note
**Timing and Locations of Illegal Fishing Activities for SouthSeafood Express Corp**

-   **Timeframe of Illegal Activities**:

  -   Around May 8th, "snappersnatcher7be" is likely involved in suspicious  cargo activities involving "Wrasse/Labridae n.refert". Hence, we suspect it conducted illegal fishing in the month previous.
  

-   **Locations of Illegal Fishing**:

  -   The vessel's frequent visits to "Nav 1" and "Nav 2" suggest these locations are hotspots for illegal activities.

  -   These locations are close to "Ghoti Preserve", a region known for fish species like "Wrasse/Labridae n.refert".
  
:::


## Task 3 (part 1) :


```{r}
#| code-fold: true
#| code-summary: "Show the code"   
transshipments_by_company %>%
  group_by(company1, company2) %>%
  summarise(total_transshipments = sum(transshipments)) %>%
  arrange(desc(total_transshipments)) %>%
  top_n(10) %>%
  ggplot(aes(x = reorder(company1, total_transshipments), y = total_transshipments)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  labs(title = "Intra-Company Transshipment Activity",
       x = "Company",
       y = "Total Transshipments") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  coord_flip()

```



```{r}
#| code-fold: true
#| code-summary: "Show the code"   
# Extract transponder ping data for vessel movements
transponder_pings <- mc2_links_prep %>%
  filter(type == "Event.TransportEvent.TransponderPing") %>%
  rename(location = source, vessel = target, ping_date = ping_date) %>%
  mutate(ping_id = row_number(),  # Add a unique identifier for each row
         location = case_when(
           location == "City of Haacklee" ~ "Haacklee",
           location == "City of Himark" ~ "Himark",
           location == "City of Port Grove" ~ "Port Grove",
           location == "City of Lomark" ~ "Lomark",
           location == "City of Paackland" ~ "Paackland",
           location == "City of South Paackland" ~ "South Paackland",
           TRUE ~ location  # Keep original value if none of the above conditions are met
         ))

# Join with mc2_nodes to get the company information
transponder_ping_df <- transponder_pings %>%
  inner_join(mc2_nodes %>% select(id, company), by = c("vessel" = "id")) %>% 
  mutate(date =ping_date,
         start_time = time)

# Calculate end_time by vessel
data <- transponder_ping_df %>%
  group_by(vessel) %>%
  arrange(start_time) %>%
  mutate(end_time = lead(start_time)) %>%
  filter(date >= as.Date("2035-05-01") & date <= as.Date("2035-05-10"))%>%
  ungroup() %>%
  select(date, start_time, end_time, location, vessel,company)

# Remove rows where end_time is NA (last observation for each vessel)
data <- data %>% filter(!is.na(end_time))%>% filter(!is.na(company))

# Now you have start_time and end_time calculated for each vessel

# Assign numeric values to locations for plotting purposes 
data$location_factor <- as.factor(data$location) 
data$location_num <- as.numeric(data$location_factor) 
```


```{r}
# Filter data and sort by vessel and date
filtered_data <- data %>%
  filter(vessel %in% c("snappersnatcher7be","roachrobberdb6","albacoreangler47d","costasmeraldaac7","kingfishcapturerbe7"))%>%
  arrange(vessel, date)

# Create the Plotly plot with initial markers and labels
plot <- plot_ly() %>%
  add_markers(data = filtered_data, x = ~date, y = ~location_num, color = ~location_factor, 
              type = 'scatter', mode = 'markers+text', text = ~location, textposition = 'top center', hoverinfo = 'text')

# Add lines for each vessel and set initial visibility to FALSE
vessel_list <- unique(filtered_data$vessel)
visibility_list <- lapply(vessel_list, function(v) FALSE)

for (v in vessel_list) {
  vessel_data <- filtered_data %>% filter(vessel == v)
  plot <- plot %>%
    add_lines(data = vessel_data, x = ~date, y = ~location_num, 
              name = v, visible = FALSE, hoverinfo = 'none')
}

# Create dropdown buttons for each vessel
buttons <- lapply(seq_along(vessel_list), function(i) {
  visibility <- c(TRUE, rep(FALSE, length(vessel_list)))
  visibility[i + 1] <- TRUE  # Add 1 because the first element is for the markers
  list(
    method = "update",
    args = list(
      list(visible = visibility),
      list(title = paste("Path of", vessel_list[i], "Over Time"))
    ),
    label = vessel_list[i]
  )
})

# Add layout settings with dropdown menu
plot <- plot %>%
  layout(title = "Path of Vessel Locations Over Time",
         xaxis = list(title = "Time"),
         yaxis = list(title = "Location"),
         hovermode = 'closest',
         updatemenus = list(
           list(
             type = "dropdown",
             direction = "down",
             buttons = buttons,
             showactive = TRUE
           )
         )
  )

plot
```
```{r}
test <-  unique(filtered_data$vessel)
test

```



```{r}
# Ensure data is arranged
filtered_data <- data %>%
  arrange(vessel, date)

# Create the Plotly plot with initial markers and labels
plot <- plot_ly() %>%
  add_markers(data = filtered_data, x = ~date, y = ~location_num, color = ~location_factor, 
              type = 'scatter', mode = 'markers+text', text = ~location, textposition = 'top center', hoverinfo = 'text')

# Add lines for each vessel and set initial visibility to FALSE
vessel_list <- unique(filtered_data$vessel)
for (v in vessel_list) {
  vessel_data <- filtered_data[filtered_data$vessel == v, ]
  plot <- plot %>%
    add_lines(data = vessel_data, x = ~date, y = ~location_num, 
              name = v, visible = FALSE, hoverinfo = 'none')
}

# Create dropdown buttons for each company
buttons <- lapply(unique(filtered_data$company), function(company) {
  company_vessels <- filtered_data$vessel[filtered_data$company == company]
  visibility <- sapply(vessel_list, function(v) v %in% company_vessels)
  visibility <- c(TRUE, visibility)  # Ensure markers are always visible
  list(
    method = "update",
    args = list(
      list(visible = visibility),
      list(title = paste("Path of Vessels in Company", company, "Over Time"))
    ),
    label = company
  )
})

# Add layout settings with dropdown menu
plot <- plot %>%
  layout(title = "Path of Vessel Locations Over Time",
         xaxis = list(title = "Time"),
         yaxis = list(title = "Location"),
         hovermode = 'closest',
         updatemenus = list(
           list(
             type = "dropdown",
             direction = "down",
             buttons = buttons
           )
         )
  )

plot



```




```{r}

# Validate geometries
geo_data <- geo_data %>%
  st_make_valid()

# Join node data
mc2_nodes_geo <- data %>%
  left_join(geo_data, by = c("location" = "id"))

# Convert the resulting data frame to sf object
mc2_nodes_geo_sf <- st_as_sf(mc2_nodes_geo)

# Extract coordinates for plotting for geometries
mc2_nodes_geo_sf <- mc2_nodes_geo_sf %>%
  mutate(Longitude = st_coordinates(st_centroid(geometry))[, 1],
         Latitude = st_coordinates(st_centroid(geometry))[, 2])%>%
  filter(vessel =="snappersnatcher7be")

```



```{r}

tmap_mode("plot")

geo_data <- st_as_sf(geo_data, coords = c("Longitude", "Latitude"), crs = 4326)

# Add columns to mark origin and destination
mc2_nodes_geo_sf_start_ <- mc2_nodes_geo_sf %>%
  mutate(point_type = case_when(
    row_number() == 1 ~ "origin",
    row_number() == n() ~ "destination",
    TRUE ~ "middle"
  ))

# Create the tmap with labels
tm_shape(geo_data) +
  tm_borders(col = "black", alpha = 0.5) +  # Optional: borders around each shape
  tm_symbols(col = "red", size = 0.2) +  # Plot nodes
  tm_layout(main.title = "Vessel Trajectories",
            main.title.size = 0.8) +
  tmap_style("watercolor")  # Using the watercolor style for background

ggplot() +
  geom_sf(data = geo_data, aes(geometry = geometry), color = "red", size = 1) +  # Plot nodes
  geom_path(data = mc2_nodes_geo_sf, aes(x = Longitude, y = Latitude, group = vessel), color = "blue", size = 1) +  # Plot paths
  geom_text(data = mc2_nodes_geo_sf, aes(x = Longitude, y = Latitude, label = location), size = 3, vjust = -1) +  # Add labels
  scale_color_manual(values = c("origin" = "green", "destination" = "red", "middle" = "blue")) +  # Colors for different points
  labs(x = "Longitude", y = "Latitude", title = "Vessel Trajectories") +
  coord_sf() +  # Use coord_sf for spatial data
  theme_minimal()  # Minimal theme
```

```{r}




```




```{r}
#### Last HarborReport of SouthSeafood Express Corp"
date_caught <- max(harboureport_culprit$harboreporting_date)
print(date_caught)
```
`"SouthSeafood Express Corp"`was likely caught just after `"2035-05-09"` as that happened to be it's last harbor report.










